{
  "version": 3,
  "sources": ["<stdin>", "../app/entry.server.tsx", "../app/root.tsx", "../app/routes/settings.tsx", "../app/generated/index.ts", "../app/components/index.tsx", "../app/lib/index.tsx", "../app/components/Layout.tsx", "../app/routes/_index.tsx", "../app/routes/post.tsx", "../app/routes/forgot.tsx", "../app/routes/signin.tsx", "../app/routes/signup.tsx", "../app/middleware/index.ts", "../app/routes/verify.tsx", "../app/routes/reset.tsx", "server-assets-manifest:@remix-run/dev/assets-manifest", "server-entry-module:@remix-run/dev/server-build"],
  "sourcesContent": ["export * from \"@remix-run/dev/server-build\";", "/**\n * By default, Remix will handle generating the HTTP Response for you.\n * You are free to delete this file if you'd like to, but if you ever want it revealed again, you can run `npx remix reveal` \u2728\n * For more information, see https://remix.run/file-conventions/entry.server\n */\n\nimport { PassThrough } from \"node:stream\";\n\nimport type { AppLoadContext, EntryContext } from \"@remix-run/node\";\nimport { Response } from \"@remix-run/node\";\nimport { RemixServer } from \"@remix-run/react\";\nimport isbot from \"isbot\";\nimport { renderToPipeableStream } from \"react-dom/server\";\n\nconst ABORT_DELAY = 5_000;\n\nexport default function handleRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext,\n  loadContext: AppLoadContext\n) {\n  return isbot(request.headers.get(\"user-agent\"))\n    ? handleBotRequest(\n        request,\n        responseStatusCode,\n        responseHeaders,\n        remixContext\n      )\n    : handleBrowserRequest(\n        request,\n        responseStatusCode,\n        responseHeaders,\n        remixContext\n      );\n}\n\nfunction handleBotRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext\n) {\n  return new Promise((resolve, reject) => {\n    let shellRendered = false;\n    const { pipe, abort } = renderToPipeableStream(\n      <RemixServer\n        context={remixContext}\n        url={request.url}\n        abortDelay={ABORT_DELAY}\n      />,\n      {\n        onAllReady() {\n          shellRendered = true;\n          const body = new PassThrough();\n\n          responseHeaders.set(\"Content-Type\", \"text/html\");\n\n          resolve(\n            new Response(body, {\n              headers: responseHeaders,\n              status: responseStatusCode,\n            })\n          );\n\n          pipe(body);\n        },\n        onShellError(error: unknown) {\n          reject(error);\n        },\n        onError(error: unknown) {\n          responseStatusCode = 500;\n          // Log streaming rendering errors from inside the shell.  Don't log\n          // errors encountered during initial shell rendering since they'll\n          // reject and get logged in handleDocumentRequest.\n          if (shellRendered) {\n            console.error(error);\n          }\n        },\n      }\n    );\n\n    setTimeout(abort, ABORT_DELAY);\n  });\n}\n\nfunction handleBrowserRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext\n) {\n  return new Promise((resolve, reject) => {\n    let shellRendered = false;\n    const { pipe, abort } = renderToPipeableStream(\n      <RemixServer\n        context={remixContext}\n        url={request.url}\n        abortDelay={ABORT_DELAY}\n      />,\n      {\n        onShellReady() {\n          shellRendered = true;\n          const body = new PassThrough();\n\n          responseHeaders.set(\"Content-Type\", \"text/html\");\n\n          resolve(\n            new Response(body, {\n              headers: responseHeaders,\n              status: responseStatusCode,\n            })\n          );\n\n          pipe(body);\n        },\n        onShellError(error: unknown) {\n          reject(error);\n        },\n        onError(error: unknown) {\n          responseStatusCode = 500;\n          // Log streaming rendering errors from inside the shell.  Don't log\n          // errors encountered during initial shell rendering since they'll\n          // reject and get logged in handleDocumentRequest.\n          if (shellRendered) {\n            console.error(error);\n          }\n        },\n      }\n    );\n\n    setTimeout(abort, ABORT_DELAY);\n  });\n}\n", "// import { cssBundleHref } from \"@remix-run/css-bundle\";\nimport type { LinksFunction } from \"@remix-run/node\";\nimport tailwindcss from \"~/tailwind.css\";\nimport {\n  Links,\n  LiveReload,\n  Meta,\n  Outlet,\n  Scripts,\n  ScrollRestoration,\n  V2_MetaFunction } from\n\"@remix-run/react\";\nimport rdtStylesheet from \"remix-development-tools/stylesheet.css\";\nimport { RemixDevTools } from \"remix-development-tools\";\n\nexport const meta: V2_MetaFunction = () => [\n{ name: \"viewport\", content: \"width=device-width,initial-scale=1\" },\n{ charSet: \"utf-8\" },\n{ httpEquiv: \"Content-Language\", content: \"en\" }];\n\nexport const links: LinksFunction = () => {\n  return [\n  // ...(cssBundleHref ? [{ rel: \"stylesheet\", href: cssBundleHref }] : []),\n  ...(rdtStylesheet ? [{ rel: \"stylesheet\", href: rdtStylesheet }] : []),\n  { rel: \"stylesheet\", href: tailwindcss }];\n\n};\n\nconst modeScript = `\n  let darkModeMediaQuery = window.matchMedia('(prefers-color-scheme: dark)')\n\n  updateMode()\n  darkModeMediaQuery.addEventListener('change', updateModeWithoutTransitions)\n  window.addEventListener('storage', updateModeWithoutTransitions)\n\n  function updateMode() {\n    let isSystemDarkMode = darkModeMediaQuery.matches\n    let isDarkMode = window.localStorage.isDarkMode === 'true' || (!('isDarkMode' in window.localStorage) && isSystemDarkMode)\n\n    if (isDarkMode) {\n      document.documentElement.classList.add('dark')\n    } else {\n      document.documentElement.classList.remove('dark')\n    }\n\n    if (isDarkMode === isSystemDarkMode) {\n      delete window.localStorage.isDarkMode\n    }\n  }\n\n  function disableTransitionsTemporarily() {\n    document.documentElement.classList.add('[&_*]:!transition-none')\n    window.setTimeout(() => {\n      document.documentElement.classList.remove('[&_*]:!transition-none')\n    }, 0)\n  }\n\n  function updateModeWithoutTransitions() {\n    disableTransitionsTemporarily()\n    updateMode()\n  }\n`;\n\nexport default function App() {\n  return (\n    <html lang=\"en\">\n      <head>\n        <Meta />\n        <script dangerouslySetInnerHTML={{ __html: modeScript }} />\n        <Links />\n      </head>\n      <body className=\"bg-gray-300 text-gray-900 dark:bg-gray-900 dark:text-gray-100\">\n        <Outlet />\n        <ScrollRestoration />\n        <Scripts />\n        {process.env.NODE_ENV === \"development\" &&\n        <>\n            <LiveReload />\n            <RemixDevTools />\n          </>}\n\n      </body>\n    </html>);\n\n}\n\nexport const ErrorBoundary: ErrorBoundaryComponent = ({ error }) => {\n  console.error({ error });\n  return (\n    <html lang=\"en\">\n      <head>\n        <title>Oh no!</title>\n        <Meta />\n        <Links />\n      </head>\n      <body>\n        <Scripts />\n        an error occurred \uD83D\uDE41\n        {error?.message || error?.toString()}\n      </body>\n    </html>);\n\n};", "import React, { useState } from \"react\";\nimport { ProfileSettingsDocument, ChangePasswordDocument, UpdateUserDocument } from \"~/generated\";\nimport {\n  Layout,\n  Card,\n  Input,\n  FormRow,\n  Button,\n  FormErrors,\n  Danger,\n  Container,\n  Legend,\n  SocialLogin,\n} from \"~/components\";\nimport { useLogout } from \"~/lib\";\nimport { ActionArgs, LoaderArgs, redirect, json } from \"@remix-run/node\";\nimport { useSearchParams, Form, useActionData, useLoaderData, useNavigate } from \"@remix-run/react\";\n\nexport async function loader({ context: { graphql } }: LoaderArgs) {\n  const { data } = await graphql(ProfileSettingsDocument, {});\n  if (data?.currentUser == null) throw redirect(\"/signin?redirectTo=/settings\");\n  return json(data);\n}\n\nexport default function SettingsPage() {\n  return (\n    <Layout>\n      <Container className=\"max-w-4xl mx-auto mb-4\">\n        <UserProfile />\n        <PasswordSettings />\n        <EmailSettings />\n        <LinkedAccounts />\n        <DeleteAccount />\n      </Container>\n    </Layout>\n  );\n}\n\nfunction UserProfile() {\n  // const [updateUser, updateMutation] = UpdateUserDocument();\n  const data = useLoaderData<typeof loader>();\n  return (\n    <Form method=\"POST\" action=\"/settings\">\n      <input type=\"hidden\" name=\"id\" value={data?.currentUser?.id} />\n      <Card as=\"fieldset\">\n        <Legend>profile settings</Legend>\n        <Container>\n          <FormRow label=\"username:\">\n            <Input\n              type=\"text\"\n              name=\"username\"\n              defaultValue={data?.currentUser?.username}\n              placeholder=\"username [required]\"\n              required\n            />\n          </FormRow>\n          <FormRow label=\"name:\">\n            <Input\n              type=\"text\"\n              name=\"name\"\n              defaultValue={data?.currentUser?.name ?? undefined}\n              placeholder=\"name\"\n            />\n          </FormRow>\n          <div>\n            <Button type=\"submit\" name=\"type\" value=\"updateProfile\">\n              update\n            </Button>\n          </div>\n        </Container>\n        <FormErrors />\n      </Card>\n    </Form>\n  );\n}\n\nfunction PasswordSettings() {\n  // const [changePassword, changePasswordMutation] = ChangePasswordDocument();\n  const data = useLoaderData<typeof loader>();\n  const response = useActionData<typeof action>();\n  return (\n    <Form method=\"POST\" action=\"/settings\">\n      <Card as=\"fieldset\">\n        <Legend>password settings</Legend>\n        <Container>\n          <FormRow\n            label={<span>old password:</span>}\n            className={data?.currentUser?.hasPassword ? \"\" : \"hidden\"}\n          >\n            <Input\n              type=\"password\"\n              name=\"oldPassword\"\n              required={data?.currentUser?.hasPassword ?? false}\n              minLength={6}\n            />\n          </FormRow>\n          <FormRow label={<span>new password:</span>}>\n            <Input type=\"password\" name=\"newPassword\" required minLength={6} />\n          </FormRow>\n          <FormRow label={<span>confirm password:</span>}>\n            <Input type=\"password\" name=\"confirmPassword\" required minLength={6} />\n          </FormRow>\n          <div>\n            <Button type=\"submit\" name=\"type\" value=\"changePassword\">\n              change password\n            </Button>\n          </div>\n        </Container>\n        <FormErrors errors={response?.errors} />\n      </Card>\n    </Form>\n  );\n}\n\nfunction EmailSettings() {\n  const data = useLoaderData<typeof loader>();\n  return (\n    <Card as=\"fieldset\">\n      <Legend>email settings</Legend>\n      <Container>\n        <div>\n          <Container>\n            {data?.currentUser?.userEmails.nodes.map(email => (\n              <Email\n                key={email.id}\n                email={email}\n                hasOtherEmails={data?.currentUser?.userEmails.nodes.length > 1}\n              />\n            ))}\n          </Container>\n          <FormErrors\n            errors={\n              data?.currentUser && data?.currentUser.isVerified\n                ? null\n                : `You do not have any verified email addresses, this will make account recovery impossible and may limit your available functionality within this application. Please complete email verification.`\n            }\n          />\n        </div>\n        <AddEmailForm />\n      </Container>\n    </Card>\n  );\n}\n\nfunction Email({\n  email,\n  hasOtherEmails,\n}: {\n  email: EmailsForm_UserEmailFragment;\n  hasOtherEmails: boolean;\n}) {\n  const canDelete = !email.isPrimary && hasOtherEmails;\n  return (\n    <li className=\"flex flex-row justify-between\">\n      <div>\n        {`\u2709\uFE0F ${email.email} `}\n        <div className=\"flex flex-row gap-2\">\n          <span\n            title={\n              email.isVerified\n                ? \"Verified\"\n                : \"Pending verification (please check your inbox / spam folder\"\n            }\n          >\n            {email.isVerified ? \"\u2705 \" : <Danger as=\"small\">(unverified)</Danger>}\n          </span>\n          Added {new Date(Date.parse(email.createdAt)).toLocaleString()}\n        </div>\n      </div>\n      <Form>\n        <input type=\"hidden\" name=\"emailId\" value={email.id} />\n        {email.isPrimary && <span key=\"primary_indicator\">Primary</span>}\n        {canDelete && (\n          <Button\n            type=\"submit\"\n            name=\"deleteEmail\"\n            onClick={() => deleteEmail({ variables: { emailId: email.id } })}\n          >\n            Delete\n          </Button>\n        )}\n        {!email.isVerified && (\n          <Button\n            variant=\"primary\"\n            onClick={() => resendEmailVerification({ variables: { emailId: email.id } })}\n          >\n            Resend verification\n          </Button>\n        )}\n        {email.isVerified && !email.isPrimary && (\n          <Button onClick={() => makeEmailPrimary({ variables: { emailId: email.id } })}>\n            Make primary\n          </Button>\n        )}\n      </Form>\n    </li>\n  );\n}\n\nfunction AddEmailForm() {\n  // const [addEmail] = AddEmailDocument();\n  const [showForm, setShowForm] = useState<boolean>(false);\n  if (!showForm) {\n    return (\n      <div>\n        <Button type=\"submit\" onClick={() => setShowForm(true)}>\n          Add email\n        </Button>\n      </div>\n    );\n  }\n  return (\n    <Form\n      onSubmit={async ({ values }) => {\n        // await addEmail({ variables: values });\n      }}\n    >\n      <FormRow label=\"new email:\">\n        <Input type=\"email\" name=\"email\" required />\n      </FormRow>\n      <div>\n        <Button type=\"submit\">Add email</Button>\n      </div>\n      <FormErrors />\n    </Form>\n  );\n}\n\nfunction UnlinkAccountButton({ id }: { id: string }) {\n  // const [doUnlink, { loading: deleting }] = UnlinkUserAuthenticationDocument();\n  const [modalOpen, setModalOpen] = useState(false);\n  const [errors, setErrors] = useState();\n\n  async function handleUnlink() {\n    setModalOpen(false);\n    try {\n      await doUnlink({ variables: { id } });\n    } catch (e) {\n      setErrors(e);\n    }\n  }\n\n  return (\n    <div>\n      {modalOpen ? (\n        <div>\n          <b>Are you sure?</b>\n          <p>\n            If you unlink this account you won&apos;t be able to log in with it any more; please\n            make sure your email is valid.\n          </p>\n          <div>\n            <Button variant=\"primary\" onClick={() => setModalOpen(false)}>\n              Cancel\n            </Button>\n            <Button variant=\"danger\" onClick={handleUnlink}>\n              Unlink\n            </Button>\n          </div>\n        </div>\n      ) : null}\n      <Button onClick={() => setModalOpen(true)}>Unlink</Button>\n      <FormErrors errors={errors} />\n    </div>\n  );\n}\n\nfunction LinkedAccounts() {\n  const data = useLoaderData<typeof loader>();\n  return (\n    <Card as=\"fieldset\">\n      <Legend>manage linked accounts</Legend>\n      {data?.currentUser?.authentications.map(auth => (\n        <div key={auth.id}>\n          <strong>{auth.service}</strong>\n          <div>Added {new Date(Date.parse(auth.createdAt)).toLocaleString()}</div>\n          <UnlinkAccountButton key=\"unlink\" id={auth.id} />\n        </div>\n      ))}\n      <SocialLogin redirectTo=\"/settings\" label={service => `Link ${service} account`} />\n    </Card>\n  );\n}\n\nfunction DeleteAccount() {\n  // const [requestAccountDeletion] = RequestAccountDeletionDocument();\n  // const [confirmAccountDeletion] = ConfirmAccountDeletionDocument();\n  const [errors, setErrors] = useState<string | null>(null);\n  const [deleting, setDeleting] = useState(false);\n  const [deleted, setDeleted] = useState(false);\n  const [itIsDone, setItIsDone] = useState(false);\n  const [doingIt, setDoingIt] = useState(false);\n  const navigate = useNavigate();\n  const [params] = useSearchParams();\n  const logout = useLogout();\n  const token = params.get(\"delete_token\");\n  function doIt() {\n    setErrors(null);\n    setDoingIt(true);\n    void (async () => {\n      try {\n        const result = await requestAccountDeletion();\n        if (!result) {\n          setErrors(\"Result expected\");\n        }\n        const { data, errors } = result;\n        if (!data || !data.requestAccountDeletion || !data.requestAccountDeletion.success) {\n          console.dir(errors);\n          setErrors(\"Requesting deletion failed\");\n        }\n        setItIsDone(true);\n      } catch (e) {\n        setErrors(e instanceof Error ? e.message : e);\n      }\n      setDoingIt(false);\n    })();\n  }\n  function confirmDeletion() {\n    if (deleting || !token) {\n      return;\n    }\n    setErrors(null);\n    setDeleting(true);\n    void (async () => {\n      try {\n        // await confirmAccountDeletion({ variables: { token } });\n        // Display confirmation\n        setDeleted(true);\n        logout();\n      } catch (e) {\n        setErrors(e);\n      }\n      setDeleting(false);\n    })();\n  }\n  if (deleted) {\n    navigate(\"/\");\n    return null;\n  }\n  return (\n    <Card as=\"fieldset\">\n      <Legend className=\"bg-red-700 text-red-100\">danger zone</Legend>\n      {token ? (\n        <div>\n          <p>\n            This is it. <b>Press this button and your account will be deleted.</b> We&apos;re sorry\n            to see you go, please don&apos;t hesitate to reach out and let us know why you no longer\n            want your account.\n          </p>\n          <p className=\"text-right\">\n            <Button\n              variant=\"danger\"\n              className=\"font-bold\"\n              onClick={confirmDeletion}\n              disabled={deleting}\n            >\n              PERMANENTLY DELETE MY ACCOUNT\n            </Button>\n          </p>\n        </div>\n      ) : itIsDone ? (\n        <div>\n          You&apos;ve been sent an email with a confirmation link in it, you must click it to\n          confirm that you are the account holder so that you may continue deleting your account.\n        </div>\n      ) : (\n        <p className=\"text-right\">\n          <Button variant=\"danger\" onClick={doIt} disabled={doingIt}>\n            I want to delete my account\n          </Button>\n        </p>\n      )}\n      <FormErrors errors={errors} />\n    </Card>\n  );\n}\n\nexport async function action({ request, context: { graphql } }: ActionArgs) {\n  const { type, ...formdata } = Object.fromEntries(await request.formData());\n  console.log(\"changing settings:\", { type, ...formdata });\n  // MakeEmailPrimaryDocument,\n  // RequestAccountDeletionDocument,\n  // DeleteEmailDocument,\n  // ResendEmailVerificationDocument,\n  // UpdateUserDocument,\n  // AddEmailDocument,\n  // UnlinkUserAuthenticationDocument,\n  // ConfirmAccountDeletionDocument,\n  try {\n    switch (type) {\n      case \"updateProfile\": {\n        console.log(\"updating profile\");\n        const { id, ...patch } = formdata;\n        const result = await graphql(UpdateUserDocument, { id, patch });\n        console.log(result);\n        return result;\n      }\n      case \"changePassword\": {\n        const result = await graphql(ChangePasswordDocument, formdata);\n        console.log(result);\n        return result;\n      }\n    }\n  } catch (e) {\n    console.log(\"error changing password:\", e);\n    if (\"message\" in e) {\n      return json({ error: e.message });\n    }\n  }\n  return json(\"unknown error\");\n}\n", "/* WARNING: This file is automatically generated. Do not edit. */\nimport { TypedDocumentNode as DocumentNode } from \"@graphql-typed-document-node/core\";\nimport gql from \"graphql-tag\";\nexport type Maybe<T> = T | null;\nexport type InputMaybe<T> = Maybe<T>;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\nexport type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = {\n  [_ in K]?: never;\n};\nexport type Incremental<T> =\n  | T\n  | { [P in keyof T]?: P extends \" $fragmentName\" | \"__typename\" ? T[P] : never };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: { input: string; output: string };\n  String: { input: string; output: string };\n  Boolean: { input: boolean; output: boolean };\n  Int: { input: number; output: number };\n  Float: { input: number; output: number };\n  /**\n   * A signed eight-byte integer. The upper big integer values are greater than the\n   * max value for a JavaScript number. Therefore all big integers will be output as\n   * strings and not numbers.\n   */\n  BigInt: { input: string; output: string };\n  /** A location in a connection that can be used for resuming pagination. */\n  Cursor: { input: any; output: any };\n  /**\n   * A point in time as described by the [ISO\n   * 8601](https://en.wikipedia.org/wiki/ISO_8601) and, if it has a timezone, [RFC\n   * 3339](https://datatracker.ietf.org/doc/html/rfc3339) standards. Input values\n   * that do not conform to both ISO 8601 and RFC 3339 may be coerced, which may lead\n   * to unexpected results.\n   */\n  Datetime: { input: string; output: string };\n  Tag: { input: string; output: string };\n  /** A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122). */\n  UUID: { input: string; output: string };\n  Url: { input: string; output: string };\n  Username: { input: string; output: string };\n};\n\n/** All input for the `changePassword` mutation. */\nexport type ChangePasswordInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  readonly clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  readonly newPassword: Scalars[\"String\"][\"input\"];\n  readonly oldPassword: Scalars[\"String\"][\"input\"];\n};\n\n/** The output of our `changePassword` mutation. */\nexport type ChangePasswordPayload = {\n  /**\n   * The exact same `clientMutationId` that was provided in the mutation input,\n   * unchanged and unused. May be used by a client to track mutations.\n   */\n  readonly clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** Our root query field type. Allows us to run any query from our mutation payload. */\n  readonly query?: Maybe<Query>;\n  readonly success?: Maybe<Scalars[\"Boolean\"][\"output\"]>;\n};\n\nexport type Comment = {\n  readonly body: Scalars[\"String\"][\"output\"];\n  /** Reads and enables pagination through a set of `Comment`. */\n  readonly childComments: CommentsConnection;\n  readonly createdAt: Scalars[\"Datetime\"][\"output\"];\n  readonly currentUserVoted?: Maybe<VoteType>;\n  readonly id: Scalars[\"UUID\"][\"output\"];\n  /** Reads a single `Comment` that is related to this `Comment`. */\n  readonly parent?: Maybe<Comment>;\n  readonly parentId?: Maybe<Scalars[\"UUID\"][\"output\"]>;\n  readonly popularity?: Maybe<Scalars[\"Float\"][\"output\"]>;\n  /** Reads a single `Post` that is related to this `Comment`. */\n  readonly post?: Maybe<Post>;\n  readonly postId: Scalars[\"String\"][\"output\"];\n  readonly score?: Maybe<Scalars[\"Int\"][\"output\"]>;\n  readonly updatedAt: Scalars[\"Datetime\"][\"output\"];\n  /** Reads a single `User` that is related to this `Comment`. */\n  readonly user?: Maybe<User>;\n  readonly userId?: Maybe<Scalars[\"UUID\"][\"output\"]>;\n};\n\nexport type CommentChildCommentsArgs = {\n  after?: InputMaybe<Scalars[\"Cursor\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"Cursor\"][\"input\"]>;\n  condition?: InputMaybe<CommentCondition>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  offset?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<ReadonlyArray<CommentsOrderBy>>;\n};\n\n/** A condition to be used against `Comment` object types. All fields are tested for equality and combined with a logical \u2018and.\u2019 */\nexport type CommentCondition = {\n  /** Checks for equality with the object\u2019s `id` field. */\n  readonly id?: InputMaybe<Scalars[\"UUID\"][\"input\"]>;\n  /** Checks for equality with the object\u2019s `parentId` field. */\n  readonly parentId?: InputMaybe<Scalars[\"UUID\"][\"input\"]>;\n  /** Checks for equality with the object\u2019s `postId` field. */\n  readonly postId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n};\n\n/** An input for mutations affecting `Comment` */\nexport type CommentInput = {\n  readonly body: Scalars[\"String\"][\"input\"];\n  readonly parentId?: InputMaybe<Scalars[\"UUID\"][\"input\"]>;\n};\n\n/** Represents an update to a `Comment`. Fields that are set will be updated. */\nexport type CommentPatch = {\n  readonly body?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n};\n\n/** A connection to a list of `Comment` values. */\nexport type CommentsConnection = {\n  /** A list of edges which contains the `Comment` and cursor to aid in pagination. */\n  readonly edges: ReadonlyArray<CommentsEdge>;\n  /** A list of `Comment` objects. */\n  readonly nodes: ReadonlyArray<Comment>;\n  /** Information to aid in pagination. */\n  readonly pageInfo: PageInfo;\n  /** The count of *all* `Comment` you could get from the connection. */\n  readonly totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** A `Comment` edge in the connection. */\nexport type CommentsEdge = {\n  /** A cursor for use in pagination. */\n  readonly cursor?: Maybe<Scalars[\"Cursor\"][\"output\"]>;\n  /** The `Comment` at the end of the edge. */\n  readonly node: Comment;\n};\n\n/** Methods to use when ordering `Comment`. */\nexport type CommentsOrderBy =\n  | \"ID_ASC\"\n  | \"ID_DESC\"\n  | \"NATURAL\"\n  | \"PARENT_ID_ASC\"\n  | \"PARENT_ID_DESC\"\n  | \"POST_ID_ASC\"\n  | \"POST_ID_DESC\"\n  | \"PRIMARY_KEY_ASC\"\n  | \"PRIMARY_KEY_DESC\";\n\n/** All input for the `confirmAccountDeletion` mutation. */\nexport type ConfirmAccountDeletionInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  readonly clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  readonly token: Scalars[\"String\"][\"input\"];\n};\n\n/** The output of our `confirmAccountDeletion` mutation. */\nexport type ConfirmAccountDeletionPayload = {\n  /**\n   * The exact same `clientMutationId` that was provided in the mutation input,\n   * unchanged and unused. May be used by a client to track mutations.\n   */\n  readonly clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** Our root query field type. Allows us to run any query from our mutation payload. */\n  readonly query?: Maybe<Query>;\n  readonly success?: Maybe<Scalars[\"Boolean\"][\"output\"]>;\n};\n\n/** All input for the create `Comment` mutation. */\nexport type CreateCommentInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  readonly clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The `Comment` to be created by this mutation. */\n  readonly comment: CommentInput;\n};\n\n/** The output of our create `Comment` mutation. */\nexport type CreateCommentPayload = {\n  /**\n   * The exact same `clientMutationId` that was provided in the mutation input,\n   * unchanged and unused. May be used by a client to track mutations.\n   */\n  readonly clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The `Comment` that was created by this mutation. */\n  readonly comment?: Maybe<Comment>;\n  /** An edge for our `Comment`. May be used by Relay 1. */\n  readonly commentEdge?: Maybe<CommentsEdge>;\n  /** Reads a single `Comment` that is related to this `Comment`. */\n  readonly parent?: Maybe<Comment>;\n  /** Reads a single `Post` that is related to this `Comment`. */\n  readonly post?: Maybe<Post>;\n  /** Our root query field type. Allows us to run any query from our mutation payload. */\n  readonly query?: Maybe<Query>;\n  /** Reads a single `User` that is related to this `Comment`. */\n  readonly user?: Maybe<User>;\n};\n\n/** The output of our create `Comment` mutation. */\nexport type CreateCommentPayloadCommentEdgeArgs = {\n  orderBy?: ReadonlyArray<CommentsOrderBy>;\n};\n\n/** All input for the create `Post` mutation. */\nexport type CreatePostInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  readonly clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The `Post` to be created by this mutation. */\n  readonly post: PostInput;\n};\n\n/** The output of our create `Post` mutation. */\nexport type CreatePostPayload = {\n  /**\n   * The exact same `clientMutationId` that was provided in the mutation input,\n   * unchanged and unused. May be used by a client to track mutations.\n   */\n  readonly clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The `Post` that was created by this mutation. */\n  readonly post?: Maybe<Post>;\n  /** An edge for our `Post`. May be used by Relay 1. */\n  readonly postEdge?: Maybe<PostsEdge>;\n  /** Our root query field type. Allows us to run any query from our mutation payload. */\n  readonly query?: Maybe<Query>;\n  /** Reads a single `User` that is related to this `Post`. */\n  readonly user?: Maybe<User>;\n};\n\n/** The output of our create `Post` mutation. */\nexport type CreatePostPayloadPostEdgeArgs = {\n  orderBy?: ReadonlyArray<PostsOrderBy>;\n};\n\n/** All input for the create `Task` mutation. */\nexport type CreateTaskInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  readonly clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The `Task` to be created by this mutation. */\n  readonly task: TaskInput;\n};\n\n/** The output of our create `Task` mutation. */\nexport type CreateTaskPayload = {\n  /**\n   * The exact same `clientMutationId` that was provided in the mutation input,\n   * unchanged and unused. May be used by a client to track mutations.\n   */\n  readonly clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** Our root query field type. Allows us to run any query from our mutation payload. */\n  readonly query?: Maybe<Query>;\n  /** The `Task` that was created by this mutation. */\n  readonly task?: Maybe<Task>;\n  /** An edge for our `Task`. May be used by Relay 1. */\n  readonly taskEdge?: Maybe<TasksEdge>;\n  /** Reads a single `User` that is related to this `Task`. */\n  readonly user?: Maybe<User>;\n};\n\n/** The output of our create `Task` mutation. */\nexport type CreateTaskPayloadTaskEdgeArgs = {\n  orderBy?: ReadonlyArray<TasksOrderBy>;\n};\n\n/** All input for the create `UserEmail` mutation. */\nexport type CreateUserEmailInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  readonly clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The `UserEmail` to be created by this mutation. */\n  readonly userEmail: UserEmailInput;\n};\n\n/** The output of our create `UserEmail` mutation. */\nexport type CreateUserEmailPayload = {\n  /**\n   * The exact same `clientMutationId` that was provided in the mutation input,\n   * unchanged and unused. May be used by a client to track mutations.\n   */\n  readonly clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** Our root query field type. Allows us to run any query from our mutation payload. */\n  readonly query?: Maybe<Query>;\n  /** Reads a single `User` that is related to this `UserEmail`. */\n  readonly user?: Maybe<User>;\n  /** The `UserEmail` that was created by this mutation. */\n  readonly userEmail?: Maybe<UserEmail>;\n  /** An edge for our `UserEmail`. May be used by Relay 1. */\n  readonly userEmailEdge?: Maybe<UserEmailsEdge>;\n};\n\n/** The output of our create `UserEmail` mutation. */\nexport type CreateUserEmailPayloadUserEmailEdgeArgs = {\n  orderBy?: ReadonlyArray<UserEmailsOrderBy>;\n};\n\n/** All input for the `deleteComment` mutation. */\nexport type DeleteCommentInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  readonly clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  readonly id: Scalars[\"UUID\"][\"input\"];\n};\n\n/** The output of our delete `Comment` mutation. */\nexport type DeleteCommentPayload = {\n  /**\n   * The exact same `clientMutationId` that was provided in the mutation input,\n   * unchanged and unused. May be used by a client to track mutations.\n   */\n  readonly clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The `Comment` that was deleted by this mutation. */\n  readonly comment?: Maybe<Comment>;\n  /** An edge for our `Comment`. May be used by Relay 1. */\n  readonly commentEdge?: Maybe<CommentsEdge>;\n  /** Reads a single `Comment` that is related to this `Comment`. */\n  readonly parent?: Maybe<Comment>;\n  /** Reads a single `Post` that is related to this `Comment`. */\n  readonly post?: Maybe<Post>;\n  /** Our root query field type. Allows us to run any query from our mutation payload. */\n  readonly query?: Maybe<Query>;\n  /** Reads a single `User` that is related to this `Comment`. */\n  readonly user?: Maybe<User>;\n};\n\n/** The output of our delete `Comment` mutation. */\nexport type DeleteCommentPayloadCommentEdgeArgs = {\n  orderBy?: ReadonlyArray<CommentsOrderBy>;\n};\n\n/** All input for the `deletePost` mutation. */\nexport type DeletePostInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  readonly clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  readonly id: Scalars[\"String\"][\"input\"];\n};\n\n/** The output of our delete `Post` mutation. */\nexport type DeletePostPayload = {\n  /**\n   * The exact same `clientMutationId` that was provided in the mutation input,\n   * unchanged and unused. May be used by a client to track mutations.\n   */\n  readonly clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The `Post` that was deleted by this mutation. */\n  readonly post?: Maybe<Post>;\n  /** An edge for our `Post`. May be used by Relay 1. */\n  readonly postEdge?: Maybe<PostsEdge>;\n  /** Our root query field type. Allows us to run any query from our mutation payload. */\n  readonly query?: Maybe<Query>;\n  /** Reads a single `User` that is related to this `Post`. */\n  readonly user?: Maybe<User>;\n};\n\n/** The output of our delete `Post` mutation. */\nexport type DeletePostPayloadPostEdgeArgs = {\n  orderBy?: ReadonlyArray<PostsOrderBy>;\n};\n\n/** All input for the `deleteTask` mutation. */\nexport type DeleteTaskInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  readonly clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  readonly id: Scalars[\"UUID\"][\"input\"];\n};\n\n/** The output of our delete `Task` mutation. */\nexport type DeleteTaskPayload = {\n  /**\n   * The exact same `clientMutationId` that was provided in the mutation input,\n   * unchanged and unused. May be used by a client to track mutations.\n   */\n  readonly clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** Our root query field type. Allows us to run any query from our mutation payload. */\n  readonly query?: Maybe<Query>;\n  /** The `Task` that was deleted by this mutation. */\n  readonly task?: Maybe<Task>;\n  /** An edge for our `Task`. May be used by Relay 1. */\n  readonly taskEdge?: Maybe<TasksEdge>;\n  /** Reads a single `User` that is related to this `Task`. */\n  readonly user?: Maybe<User>;\n};\n\n/** The output of our delete `Task` mutation. */\nexport type DeleteTaskPayloadTaskEdgeArgs = {\n  orderBy?: ReadonlyArray<TasksOrderBy>;\n};\n\n/** All input for the `deleteUserAuthentication` mutation. */\nexport type DeleteUserAuthenticationInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  readonly clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  readonly id: Scalars[\"UUID\"][\"input\"];\n};\n\n/** The output of our delete `UserAuthentication` mutation. */\nexport type DeleteUserAuthenticationPayload = {\n  /**\n   * The exact same `clientMutationId` that was provided in the mutation input,\n   * unchanged and unused. May be used by a client to track mutations.\n   */\n  readonly clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** Our root query field type. Allows us to run any query from our mutation payload. */\n  readonly query?: Maybe<Query>;\n  /** Reads a single `User` that is related to this `UserAuthentication`. */\n  readonly user?: Maybe<User>;\n  /** The `UserAuthentication` that was deleted by this mutation. */\n  readonly userAuthentication?: Maybe<UserAuthentication>;\n};\n\n/** All input for the `deleteUserEmail` mutation. */\nexport type DeleteUserEmailInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  readonly clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  readonly id: Scalars[\"UUID\"][\"input\"];\n};\n\n/** The output of our delete `UserEmail` mutation. */\nexport type DeleteUserEmailPayload = {\n  /**\n   * The exact same `clientMutationId` that was provided in the mutation input,\n   * unchanged and unused. May be used by a client to track mutations.\n   */\n  readonly clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** Our root query field type. Allows us to run any query from our mutation payload. */\n  readonly query?: Maybe<Query>;\n  /** Reads a single `User` that is related to this `UserEmail`. */\n  readonly user?: Maybe<User>;\n  /** The `UserEmail` that was deleted by this mutation. */\n  readonly userEmail?: Maybe<UserEmail>;\n  /** An edge for our `UserEmail`. May be used by Relay 1. */\n  readonly userEmailEdge?: Maybe<UserEmailsEdge>;\n};\n\n/** The output of our delete `UserEmail` mutation. */\nexport type DeleteUserEmailPayloadUserEmailEdgeArgs = {\n  orderBy?: ReadonlyArray<UserEmailsOrderBy>;\n};\n\n/** All input for the `forgotPassword` mutation. */\nexport type ForgotPasswordInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  readonly clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  readonly email: Scalars[\"String\"][\"input\"];\n};\n\n/** The output of our `forgotPassword` mutation. */\nexport type ForgotPasswordPayload = {\n  /**\n   * The exact same `clientMutationId` that was provided in the mutation input,\n   * unchanged and unused. May be used by a client to track mutations.\n   */\n  readonly clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** Our root query field type. Allows us to run any query from our mutation payload. */\n  readonly query?: Maybe<Query>;\n};\n\nexport type LoginInput = {\n  readonly password: Scalars[\"String\"][\"input\"];\n  readonly username: Scalars[\"String\"][\"input\"];\n};\n\nexport type LoginPayload = {\n  readonly user: User;\n};\n\nexport type LogoutPayload = {\n  readonly success?: Maybe<Scalars[\"Boolean\"][\"output\"]>;\n};\n\n/** All input for the `makeEmailPrimary` mutation. */\nexport type MakeEmailPrimaryInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  readonly clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  readonly emailId: Scalars[\"UUID\"][\"input\"];\n};\n\n/** The output of our `makeEmailPrimary` mutation. */\nexport type MakeEmailPrimaryPayload = {\n  /**\n   * The exact same `clientMutationId` that was provided in the mutation input,\n   * unchanged and unused. May be used by a client to track mutations.\n   */\n  readonly clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** Our root query field type. Allows us to run any query from our mutation payload. */\n  readonly query?: Maybe<Query>;\n  /** Reads a single `User` that is related to this `UserEmail`. */\n  readonly user?: Maybe<User>;\n  readonly userEmail?: Maybe<UserEmail>;\n  /** An edge for our `UserEmail`. May be used by Relay 1. */\n  readonly userEmailEdge?: Maybe<UserEmailsEdge>;\n};\n\n/** The output of our `makeEmailPrimary` mutation. */\nexport type MakeEmailPrimaryPayloadUserEmailEdgeArgs = {\n  orderBy?: ReadonlyArray<UserEmailsOrderBy>;\n};\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type Mutation = {\n  /** Enter your old password and a new password to change your password. */\n  readonly changePassword?: Maybe<ChangePasswordPayload>;\n  /** If you're certain you want to delete your account, use `requestAccountDeletion` to request an account deletion token, and then supply the token through this mutation to complete account deletion. */\n  readonly confirmAccountDeletion?: Maybe<ConfirmAccountDeletionPayload>;\n  /** Creates a single `Comment`. */\n  readonly createComment?: Maybe<CreateCommentPayload>;\n  /** Creates a single `Post`. */\n  readonly createPost?: Maybe<CreatePostPayload>;\n  /** Creates a single `Task`. */\n  readonly createTask?: Maybe<CreateTaskPayload>;\n  /** Creates a single `UserEmail`. */\n  readonly createUserEmail?: Maybe<CreateUserEmailPayload>;\n  /** Deletes a single `Comment` using a unique key. */\n  readonly deleteComment?: Maybe<DeleteCommentPayload>;\n  /** Deletes a single `Post` using a unique key. */\n  readonly deletePost?: Maybe<DeletePostPayload>;\n  /** Deletes a single `Task` using a unique key. */\n  readonly deleteTask?: Maybe<DeleteTaskPayload>;\n  /** Deletes a single `UserAuthentication` using a unique key. */\n  readonly deleteUserAuthentication?: Maybe<DeleteUserAuthenticationPayload>;\n  /** Deletes a single `UserEmail` using a unique key. */\n  readonly deleteUserEmail?: Maybe<DeleteUserEmailPayload>;\n  /** If you've forgotten your password, give us one of your email addresses and we'll send you a reset token. Note this only works if you have added an email address! */\n  readonly forgotPassword?: Maybe<ForgotPasswordPayload>;\n  /** Use this mutation to log in to your account; this login uses sessions so you do not need to take further action. */\n  readonly login?: Maybe<LoginPayload>;\n  /** Use this mutation to logout from your account. Don't forget to clear the client state! */\n  readonly logout?: Maybe<LogoutPayload>;\n  /** Your primary email is where we'll notify of account events; other emails may be used for discovery or login. Use this when you're changing your email address. */\n  readonly makeEmailPrimary?: Maybe<MakeEmailPrimaryPayload>;\n  /** Use this mutation to create an account on our system. This may only be used if you are logged out. */\n  readonly register?: Maybe<RegisterPayload>;\n  /** Begin the account deletion flow by requesting the confirmation email */\n  readonly requestAccountDeletion?: Maybe<RequestAccountDeletionPayload>;\n  /** If you didn't receive the verification code for this email, we can resend it. We silently cap the rate of resends on the backend, so calls to this function may not result in another email being sent if it has been called recently. */\n  readonly resendEmailVerificationCode?: Maybe<ResendEmailVerificationCodePayload>;\n  /** After triggering forgotPassword, you'll be sent a reset token. Combine this with your user ID and a new password to reset your password. */\n  readonly resetPassword?: Maybe<ResetPasswordPayload>;\n  /** Updates a single `Comment` using a unique key and a patch. */\n  readonly updateComment?: Maybe<UpdateCommentPayload>;\n  /** Updates a single `Post` using a unique key and a patch. */\n  readonly updatePost?: Maybe<UpdatePostPayload>;\n  /** Updates a single `Task` using a unique key and a patch. */\n  readonly updateTask?: Maybe<UpdateTaskPayload>;\n  /** Updates a single `User` using a unique key and a patch. */\n  readonly updateUser?: Maybe<UpdateUserPayload>;\n  /** Once you have received a verification token for your email, you may call this mutation with that token to make your email verified. */\n  readonly verifyEmail?: Maybe<VerifyEmailPayload>;\n};\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationChangePasswordArgs = {\n  input: ChangePasswordInput;\n};\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationConfirmAccountDeletionArgs = {\n  input: ConfirmAccountDeletionInput;\n};\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationCreateCommentArgs = {\n  input: CreateCommentInput;\n};\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationCreatePostArgs = {\n  input: CreatePostInput;\n};\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationCreateTaskArgs = {\n  input: CreateTaskInput;\n};\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationCreateUserEmailArgs = {\n  input: CreateUserEmailInput;\n};\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationDeleteCommentArgs = {\n  input: DeleteCommentInput;\n};\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationDeletePostArgs = {\n  input: DeletePostInput;\n};\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationDeleteTaskArgs = {\n  input: DeleteTaskInput;\n};\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationDeleteUserAuthenticationArgs = {\n  input: DeleteUserAuthenticationInput;\n};\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationDeleteUserEmailArgs = {\n  input: DeleteUserEmailInput;\n};\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationForgotPasswordArgs = {\n  input: ForgotPasswordInput;\n};\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationLoginArgs = {\n  input: LoginInput;\n};\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationMakeEmailPrimaryArgs = {\n  input: MakeEmailPrimaryInput;\n};\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationRegisterArgs = {\n  input: RegisterInput;\n};\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationRequestAccountDeletionArgs = {\n  input: RequestAccountDeletionInput;\n};\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationResendEmailVerificationCodeArgs = {\n  input: ResendEmailVerificationCodeInput;\n};\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationResetPasswordArgs = {\n  input: ResetPasswordInput;\n};\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationUpdateCommentArgs = {\n  input: UpdateCommentInput;\n};\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationUpdatePostArgs = {\n  input: UpdatePostInput;\n};\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationUpdateTaskArgs = {\n  input: UpdateTaskInput;\n};\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationUpdateUserArgs = {\n  input: UpdateUserInput;\n};\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationVerifyEmailArgs = {\n  input: VerifyEmailInput;\n};\n\n/** Information about pagination in a connection. */\nexport type PageInfo = {\n  /** When paginating forwards, the cursor to continue. */\n  readonly endCursor?: Maybe<Scalars[\"Cursor\"][\"output\"]>;\n  /** When paginating forwards, are there more items? */\n  readonly hasNextPage: Scalars[\"Boolean\"][\"output\"];\n  /** When paginating backwards, are there more items? */\n  readonly hasPreviousPage: Scalars[\"Boolean\"][\"output\"];\n  /** When paginating backwards, the cursor to continue. */\n  readonly startCursor?: Maybe<Scalars[\"Cursor\"][\"output\"]>;\n};\n\nexport type Post = {\n  readonly body: Scalars[\"String\"][\"output\"];\n  /** Reads and enables pagination through a set of `Comment`. */\n  readonly comments: CommentsConnection;\n  readonly createdAt: Scalars[\"Datetime\"][\"output\"];\n  readonly currentUserVoted?: Maybe<VoteType>;\n  readonly id: Scalars[\"String\"][\"output\"];\n  readonly popularity?: Maybe<Scalars[\"Float\"][\"output\"]>;\n  readonly privacy: Privacy;\n  readonly score?: Maybe<Scalars[\"Int\"][\"output\"]>;\n  readonly tags: ReadonlyArray<Maybe<Scalars[\"Tag\"][\"output\"]>>;\n  readonly title: Scalars[\"String\"][\"output\"];\n  readonly updatedAt: Scalars[\"Datetime\"][\"output\"];\n  /** Reads a single `User` that is related to this `Post`. */\n  readonly user?: Maybe<User>;\n  readonly userId: Scalars[\"UUID\"][\"output\"];\n};\n\nexport type PostCommentsArgs = {\n  after?: InputMaybe<Scalars[\"Cursor\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"Cursor\"][\"input\"]>;\n  condition?: InputMaybe<CommentCondition>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  offset?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<ReadonlyArray<CommentsOrderBy>>;\n};\n\n/** A condition to be used against `Post` object types. All fields are tested for equality and combined with a logical \u2018and.\u2019 */\nexport type PostCondition = {\n  /** Checks for equality with the object\u2019s `createdAt` field. */\n  readonly createdAt?: InputMaybe<Scalars[\"Datetime\"][\"input\"]>;\n  /** Checks for equality with the object\u2019s `id` field. */\n  readonly id?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** Checks for equality with the object\u2019s `tags` field. */\n  readonly tags?: InputMaybe<ReadonlyArray<InputMaybe<Scalars[\"Tag\"][\"input\"]>>>;\n};\n\n/** An input for mutations affecting `Post` */\nexport type PostInput = {\n  readonly body: Scalars[\"String\"][\"input\"];\n  readonly privacy?: InputMaybe<Privacy>;\n  readonly tags?: InputMaybe<ReadonlyArray<InputMaybe<Scalars[\"Tag\"][\"input\"]>>>;\n  readonly title: Scalars[\"String\"][\"input\"];\n};\n\n/** Represents an update to a `Post`. Fields that are set will be updated. */\nexport type PostPatch = {\n  readonly body?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  readonly privacy?: InputMaybe<Privacy>;\n  readonly tags?: InputMaybe<ReadonlyArray<InputMaybe<Scalars[\"Tag\"][\"input\"]>>>;\n  readonly title?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n};\n\n/** A connection to a list of `Post` values. */\nexport type PostsConnection = {\n  /** A list of edges which contains the `Post` and cursor to aid in pagination. */\n  readonly edges: ReadonlyArray<PostsEdge>;\n  /** A list of `Post` objects. */\n  readonly nodes: ReadonlyArray<Post>;\n  /** Information to aid in pagination. */\n  readonly pageInfo: PageInfo;\n  /** The count of *all* `Post` you could get from the connection. */\n  readonly totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** A `Post` edge in the connection. */\nexport type PostsEdge = {\n  /** A cursor for use in pagination. */\n  readonly cursor?: Maybe<Scalars[\"Cursor\"][\"output\"]>;\n  /** The `Post` at the end of the edge. */\n  readonly node: Post;\n};\n\n/** Methods to use when ordering `Post`. */\nexport type PostsOrderBy =\n  | \"CREATED_AT_ASC\"\n  | \"CREATED_AT_DESC\"\n  | \"ID_ASC\"\n  | \"ID_DESC\"\n  | \"NATURAL\"\n  | \"PRIMARY_KEY_ASC\"\n  | \"PRIMARY_KEY_DESC\";\n\nexport type Privacy = \"PRIVATE\" | \"PUBLIC\";\n\n/** The root query type which gives access points into the data universe. */\nexport type Query = {\n  /** Get a single `Comment`. */\n  readonly comment?: Maybe<Comment>;\n  /** Reads and enables pagination through a set of `Comment`. */\n  readonly comments?: Maybe<CommentsConnection>;\n  /** The currently logged in user (or null if not logged in). */\n  readonly currentUser?: Maybe<User>;\n  /** Get a single `Post`. */\n  readonly post?: Maybe<Post>;\n  /** Reads and enables pagination through a set of `Post`. */\n  readonly posts?: Maybe<PostsConnection>;\n  readonly postsByTags?: Maybe<Post>;\n  /** Get a single `Task`. */\n  readonly task?: Maybe<Task>;\n  /** Reads and enables pagination through a set of `Task`. */\n  readonly tasks?: Maybe<TasksConnection>;\n  /** Reads and enables pagination through a set of `TopTag`. */\n  readonly topTags?: Maybe<TopTagsConnection>;\n  /** Get a single `User`. */\n  readonly user?: Maybe<User>;\n  /** Get a single `UserAuthentication`. */\n  readonly userAuthentication?: Maybe<UserAuthentication>;\n  /** Get a single `User`. */\n  readonly userByUsername?: Maybe<User>;\n  /** Get a single `UserEmail`. */\n  readonly userEmail?: Maybe<UserEmail>;\n};\n\n/** The root query type which gives access points into the data universe. */\nexport type QueryCommentArgs = {\n  id: Scalars[\"UUID\"][\"input\"];\n};\n\n/** The root query type which gives access points into the data universe. */\nexport type QueryCommentsArgs = {\n  after?: InputMaybe<Scalars[\"Cursor\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"Cursor\"][\"input\"]>;\n  condition?: InputMaybe<CommentCondition>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  offset?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<ReadonlyArray<CommentsOrderBy>>;\n};\n\n/** The root query type which gives access points into the data universe. */\nexport type QueryPostArgs = {\n  id: Scalars[\"String\"][\"input\"];\n};\n\n/** The root query type which gives access points into the data universe. */\nexport type QueryPostsArgs = {\n  after?: InputMaybe<Scalars[\"Cursor\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"Cursor\"][\"input\"]>;\n  condition?: InputMaybe<PostCondition>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  offset?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<ReadonlyArray<PostsOrderBy>>;\n};\n\n/** The root query type which gives access points into the data universe. */\nexport type QueryPostsByTagsArgs = {\n  tags: ReadonlyArray<InputMaybe<Scalars[\"String\"][\"input\"]>>;\n};\n\n/** The root query type which gives access points into the data universe. */\nexport type QueryTaskArgs = {\n  id: Scalars[\"UUID\"][\"input\"];\n};\n\n/** The root query type which gives access points into the data universe. */\nexport type QueryTasksArgs = {\n  after?: InputMaybe<Scalars[\"Cursor\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"Cursor\"][\"input\"]>;\n  condition?: InputMaybe<TaskCondition>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  offset?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<ReadonlyArray<TasksOrderBy>>;\n};\n\n/** The root query type which gives access points into the data universe. */\nexport type QueryTopTagsArgs = {\n  after?: InputMaybe<Scalars[\"Cursor\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"Cursor\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  offset?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** The root query type which gives access points into the data universe. */\nexport type QueryUserArgs = {\n  id: Scalars[\"UUID\"][\"input\"];\n};\n\n/** The root query type which gives access points into the data universe. */\nexport type QueryUserAuthenticationArgs = {\n  id: Scalars[\"UUID\"][\"input\"];\n};\n\n/** The root query type which gives access points into the data universe. */\nexport type QueryUserByUsernameArgs = {\n  username: Scalars[\"Username\"][\"input\"];\n};\n\n/** The root query type which gives access points into the data universe. */\nexport type QueryUserEmailArgs = {\n  id: Scalars[\"UUID\"][\"input\"];\n};\n\nexport type RegisterInput = {\n  readonly avatarUrl?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  readonly email: Scalars[\"String\"][\"input\"];\n  readonly name?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  readonly password: Scalars[\"String\"][\"input\"];\n  readonly username: Scalars[\"String\"][\"input\"];\n};\n\nexport type RegisterPayload = {\n  readonly user: User;\n};\n\n/** All input for the `requestAccountDeletion` mutation. */\nexport type RequestAccountDeletionInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  readonly clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n};\n\n/** The output of our `requestAccountDeletion` mutation. */\nexport type RequestAccountDeletionPayload = {\n  /**\n   * The exact same `clientMutationId` that was provided in the mutation input,\n   * unchanged and unused. May be used by a client to track mutations.\n   */\n  readonly clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** Our root query field type. Allows us to run any query from our mutation payload. */\n  readonly query?: Maybe<Query>;\n  readonly success?: Maybe<Scalars[\"Boolean\"][\"output\"]>;\n};\n\n/** All input for the `resendEmailVerificationCode` mutation. */\nexport type ResendEmailVerificationCodeInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  readonly clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  readonly emailId: Scalars[\"UUID\"][\"input\"];\n};\n\n/** The output of our `resendEmailVerificationCode` mutation. */\nexport type ResendEmailVerificationCodePayload = {\n  /**\n   * The exact same `clientMutationId` that was provided in the mutation input,\n   * unchanged and unused. May be used by a client to track mutations.\n   */\n  readonly clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** Our root query field type. Allows us to run any query from our mutation payload. */\n  readonly query?: Maybe<Query>;\n  readonly success?: Maybe<Scalars[\"Boolean\"][\"output\"]>;\n};\n\n/** All input for the `resetPassword` mutation. */\nexport type ResetPasswordInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  readonly clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  readonly newPassword: Scalars[\"String\"][\"input\"];\n  readonly resetToken: Scalars[\"String\"][\"input\"];\n  readonly userId: Scalars[\"UUID\"][\"input\"];\n};\n\n/** The output of our `resetPassword` mutation. */\nexport type ResetPasswordPayload = {\n  /**\n   * The exact same `clientMutationId` that was provided in the mutation input,\n   * unchanged and unused. May be used by a client to track mutations.\n   */\n  readonly clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** Our root query field type. Allows us to run any query from our mutation payload. */\n  readonly query?: Maybe<Query>;\n  readonly success?: Maybe<Scalars[\"Boolean\"][\"output\"]>;\n};\n\n/** The root subscription type: contains realtime events you can subscribe to with the `subscription` operation. */\nexport type Subscription = {\n  /** Triggered when the logged in user's record is updated in some way. */\n  readonly currentUserUpdated?: Maybe<UserSubscriptionPayload>;\n};\n\nexport type Task = {\n  readonly createdAt: Scalars[\"Datetime\"][\"output\"];\n  readonly description?: Maybe<Scalars[\"String\"][\"output\"]>;\n  readonly id: Scalars[\"UUID\"][\"output\"];\n  readonly status?: Maybe<TaskStatus>;\n  readonly tags: ReadonlyArray<Maybe<Scalars[\"String\"][\"output\"]>>;\n  readonly title: Scalars[\"String\"][\"output\"];\n  readonly updatedAt: Scalars[\"Datetime\"][\"output\"];\n  /** Reads a single `User` that is related to this `Task`. */\n  readonly user?: Maybe<User>;\n  readonly userId: Scalars[\"UUID\"][\"output\"];\n};\n\n/** A condition to be used against `Task` object types. All fields are tested for equality and combined with a logical \u2018and.\u2019 */\nexport type TaskCondition = {\n  /** Checks for equality with the object\u2019s `id` field. */\n  readonly id?: InputMaybe<Scalars[\"UUID\"][\"input\"]>;\n  /** Checks for equality with the object\u2019s `tags` field. */\n  readonly tags?: InputMaybe<ReadonlyArray<InputMaybe<Scalars[\"String\"][\"input\"]>>>;\n  /** Checks for equality with the object\u2019s `userId` field. */\n  readonly userId?: InputMaybe<Scalars[\"UUID\"][\"input\"]>;\n};\n\n/** An input for mutations affecting `Task` */\nexport type TaskInput = {\n  readonly description?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  readonly tags?: InputMaybe<ReadonlyArray<InputMaybe<Scalars[\"String\"][\"input\"]>>>;\n  readonly title: Scalars[\"String\"][\"input\"];\n};\n\n/** Represents an update to a `Task`. Fields that are set will be updated. */\nexport type TaskPatch = {\n  readonly description?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  readonly tags?: InputMaybe<ReadonlyArray<InputMaybe<Scalars[\"String\"][\"input\"]>>>;\n  readonly title?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n};\n\nexport type TaskStatus = \"ABANDONED\" | \"COMPLETED\" | \"PENDING\" | \"STARTED\";\n\n/** A connection to a list of `Task` values. */\nexport type TasksConnection = {\n  /** A list of edges which contains the `Task` and cursor to aid in pagination. */\n  readonly edges: ReadonlyArray<TasksEdge>;\n  /** A list of `Task` objects. */\n  readonly nodes: ReadonlyArray<Task>;\n  /** Information to aid in pagination. */\n  readonly pageInfo: PageInfo;\n  /** The count of *all* `Task` you could get from the connection. */\n  readonly totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** A `Task` edge in the connection. */\nexport type TasksEdge = {\n  /** A cursor for use in pagination. */\n  readonly cursor?: Maybe<Scalars[\"Cursor\"][\"output\"]>;\n  /** The `Task` at the end of the edge. */\n  readonly node: Task;\n};\n\n/** Methods to use when ordering `Task`. */\nexport type TasksOrderBy =\n  | \"ID_ASC\"\n  | \"ID_DESC\"\n  | \"NATURAL\"\n  | \"PRIMARY_KEY_ASC\"\n  | \"PRIMARY_KEY_DESC\"\n  | \"USER_ID_ASC\"\n  | \"USER_ID_DESC\";\n\nexport type TopTag = {\n  readonly count?: Maybe<Scalars[\"BigInt\"][\"output\"]>;\n  readonly tag?: Maybe<Scalars[\"Tag\"][\"output\"]>;\n};\n\n/** A connection to a list of `TopTag` values. */\nexport type TopTagsConnection = {\n  /** A list of edges which contains the `TopTag` and cursor to aid in pagination. */\n  readonly edges: ReadonlyArray<TopTagsEdge>;\n  /** A list of `TopTag` objects. */\n  readonly nodes: ReadonlyArray<TopTag>;\n  /** Information to aid in pagination. */\n  readonly pageInfo: PageInfo;\n  /** The count of *all* `TopTag` you could get from the connection. */\n  readonly totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** A `TopTag` edge in the connection. */\nexport type TopTagsEdge = {\n  /** A cursor for use in pagination. */\n  readonly cursor?: Maybe<Scalars[\"Cursor\"][\"output\"]>;\n  /** The `TopTag` at the end of the edge. */\n  readonly node: TopTag;\n};\n\n/** All input for the `updateComment` mutation. */\nexport type UpdateCommentInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  readonly clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  readonly id: Scalars[\"UUID\"][\"input\"];\n  /** An object where the defined keys will be set on the `Comment` being updated. */\n  readonly patch: CommentPatch;\n};\n\n/** The output of our update `Comment` mutation. */\nexport type UpdateCommentPayload = {\n  /**\n   * The exact same `clientMutationId` that was provided in the mutation input,\n   * unchanged and unused. May be used by a client to track mutations.\n   */\n  readonly clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The `Comment` that was updated by this mutation. */\n  readonly comment?: Maybe<Comment>;\n  /** An edge for our `Comment`. May be used by Relay 1. */\n  readonly commentEdge?: Maybe<CommentsEdge>;\n  /** Reads a single `Comment` that is related to this `Comment`. */\n  readonly parent?: Maybe<Comment>;\n  /** Reads a single `Post` that is related to this `Comment`. */\n  readonly post?: Maybe<Post>;\n  /** Our root query field type. Allows us to run any query from our mutation payload. */\n  readonly query?: Maybe<Query>;\n  /** Reads a single `User` that is related to this `Comment`. */\n  readonly user?: Maybe<User>;\n};\n\n/** The output of our update `Comment` mutation. */\nexport type UpdateCommentPayloadCommentEdgeArgs = {\n  orderBy?: ReadonlyArray<CommentsOrderBy>;\n};\n\n/** All input for the `updatePost` mutation. */\nexport type UpdatePostInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  readonly clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  readonly id: Scalars[\"String\"][\"input\"];\n  /** An object where the defined keys will be set on the `Post` being updated. */\n  readonly patch: PostPatch;\n};\n\n/** The output of our update `Post` mutation. */\nexport type UpdatePostPayload = {\n  /**\n   * The exact same `clientMutationId` that was provided in the mutation input,\n   * unchanged and unused. May be used by a client to track mutations.\n   */\n  readonly clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The `Post` that was updated by this mutation. */\n  readonly post?: Maybe<Post>;\n  /** An edge for our `Post`. May be used by Relay 1. */\n  readonly postEdge?: Maybe<PostsEdge>;\n  /** Our root query field type. Allows us to run any query from our mutation payload. */\n  readonly query?: Maybe<Query>;\n  /** Reads a single `User` that is related to this `Post`. */\n  readonly user?: Maybe<User>;\n};\n\n/** The output of our update `Post` mutation. */\nexport type UpdatePostPayloadPostEdgeArgs = {\n  orderBy?: ReadonlyArray<PostsOrderBy>;\n};\n\n/** All input for the `updateTask` mutation. */\nexport type UpdateTaskInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  readonly clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  readonly id: Scalars[\"UUID\"][\"input\"];\n  /** An object where the defined keys will be set on the `Task` being updated. */\n  readonly patch: TaskPatch;\n};\n\n/** The output of our update `Task` mutation. */\nexport type UpdateTaskPayload = {\n  /**\n   * The exact same `clientMutationId` that was provided in the mutation input,\n   * unchanged and unused. May be used by a client to track mutations.\n   */\n  readonly clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** Our root query field type. Allows us to run any query from our mutation payload. */\n  readonly query?: Maybe<Query>;\n  /** The `Task` that was updated by this mutation. */\n  readonly task?: Maybe<Task>;\n  /** An edge for our `Task`. May be used by Relay 1. */\n  readonly taskEdge?: Maybe<TasksEdge>;\n  /** Reads a single `User` that is related to this `Task`. */\n  readonly user?: Maybe<User>;\n};\n\n/** The output of our update `Task` mutation. */\nexport type UpdateTaskPayloadTaskEdgeArgs = {\n  orderBy?: ReadonlyArray<TasksOrderBy>;\n};\n\n/** All input for the `updateUser` mutation. */\nexport type UpdateUserInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  readonly clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** Unique identifier for the user. */\n  readonly id: Scalars[\"UUID\"][\"input\"];\n  /** An object where the defined keys will be set on the `User` being updated. */\n  readonly patch: UserPatch;\n};\n\n/** The output of our update `User` mutation. */\nexport type UpdateUserPayload = {\n  /**\n   * The exact same `clientMutationId` that was provided in the mutation input,\n   * unchanged and unused. May be used by a client to track mutations.\n   */\n  readonly clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** Our root query field type. Allows us to run any query from our mutation payload. */\n  readonly query?: Maybe<Query>;\n  /** The `User` that was updated by this mutation. */\n  readonly user?: Maybe<User>;\n  /** An edge for our `User`. May be used by Relay 1. */\n  readonly userEdge?: Maybe<UsersEdge>;\n};\n\n/** The output of our update `User` mutation. */\nexport type UpdateUserPayloadUserEdgeArgs = {\n  orderBy?: ReadonlyArray<UsersOrderBy>;\n};\n\n/** A user who can log in to the application. */\nexport type User = {\n  /** Optional avatar URL. */\n  readonly avatarUrl?: Maybe<Scalars[\"Url\"][\"output\"]>;\n  readonly createdAt: Scalars[\"Datetime\"][\"output\"];\n  readonly hasPassword?: Maybe<Scalars[\"Boolean\"][\"output\"]>;\n  /** Unique identifier for the user. */\n  readonly id: Scalars[\"UUID\"][\"output\"];\n  readonly isVerified: Scalars[\"Boolean\"][\"output\"];\n  /** Public-facing name (or pseudonym) of the user. */\n  readonly name?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** If admin, the user has elevated privileges. */\n  readonly role: UserRole;\n  /** Reads and enables pagination through a set of `Task`. */\n  readonly tasks: TasksConnection;\n  readonly updatedAt: Scalars[\"Datetime\"][\"output\"];\n  /** Reads and enables pagination through a set of `UserAuthentication`. */\n  readonly userAuthenticationsList: ReadonlyArray<UserAuthentication>;\n  /** Reads and enables pagination through a set of `UserEmail`. */\n  readonly userEmails: UserEmailsConnection;\n  /** Public-facing username (or 'handle') of the user. */\n  readonly username: Scalars[\"Username\"][\"output\"];\n};\n\n/** A user who can log in to the application. */\nexport type UserTasksArgs = {\n  after?: InputMaybe<Scalars[\"Cursor\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"Cursor\"][\"input\"]>;\n  condition?: InputMaybe<TaskCondition>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  offset?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<ReadonlyArray<TasksOrderBy>>;\n};\n\n/** A user who can log in to the application. */\nexport type UserUserAuthenticationsListArgs = {\n  condition?: InputMaybe<UserAuthenticationCondition>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  offset?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<ReadonlyArray<UserAuthenticationsOrderBy>>;\n};\n\n/** A user who can log in to the application. */\nexport type UserUserEmailsArgs = {\n  after?: InputMaybe<Scalars[\"Cursor\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"Cursor\"][\"input\"]>;\n  condition?: InputMaybe<UserEmailCondition>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  offset?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<ReadonlyArray<UserEmailsOrderBy>>;\n};\n\n/** Contains information about the login providers this user has used, so that they may disconnect them should they wish. */\nexport type UserAuthentication = {\n  readonly createdAt: Scalars[\"Datetime\"][\"output\"];\n  readonly id: Scalars[\"UUID\"][\"output\"];\n  /** A unique identifier for the user within the login service. */\n  readonly identifier: Scalars[\"String\"][\"output\"];\n  /** The login service used, e.g. `twitter` or `github`. */\n  readonly service: Scalars[\"String\"][\"output\"];\n  readonly updatedAt: Scalars[\"Datetime\"][\"output\"];\n  /** Reads a single `User` that is related to this `UserAuthentication`. */\n  readonly user?: Maybe<User>;\n  readonly userId: Scalars[\"UUID\"][\"output\"];\n};\n\n/**\n * A condition to be used against `UserAuthentication` object types. All fields are\n * tested for equality and combined with a logical \u2018and.\u2019\n */\nexport type UserAuthenticationCondition = {\n  /** Checks for equality with the object\u2019s `id` field. */\n  readonly id?: InputMaybe<Scalars[\"UUID\"][\"input\"]>;\n  /** Checks for equality with the object\u2019s `service` field. */\n  readonly service?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** Checks for equality with the object\u2019s `userId` field. */\n  readonly userId?: InputMaybe<Scalars[\"UUID\"][\"input\"]>;\n};\n\n/** Methods to use when ordering `UserAuthentication`. */\nexport type UserAuthenticationsOrderBy =\n  | \"ID_ASC\"\n  | \"ID_DESC\"\n  | \"NATURAL\"\n  | \"PRIMARY_KEY_ASC\"\n  | \"PRIMARY_KEY_DESC\"\n  | \"SERVICE_ASC\"\n  | \"SERVICE_DESC\"\n  | \"USER_ID_ASC\"\n  | \"USER_ID_DESC\";\n\n/** Information about a user's email address. */\nexport type UserEmail = {\n  readonly createdAt: Scalars[\"Datetime\"][\"output\"];\n  /** The users email address, in `a@b.c` format. */\n  readonly email: Scalars[\"String\"][\"output\"];\n  readonly id: Scalars[\"UUID\"][\"output\"];\n  readonly isPrimary: Scalars[\"Boolean\"][\"output\"];\n  /** True if the user has is_verified their email address (by clicking the link in the email we sent them, or logging in with a social login provider), false otherwise. */\n  readonly isVerified: Scalars[\"Boolean\"][\"output\"];\n  readonly updatedAt: Scalars[\"Datetime\"][\"output\"];\n  /** Reads a single `User` that is related to this `UserEmail`. */\n  readonly user?: Maybe<User>;\n  readonly userId: Scalars[\"UUID\"][\"output\"];\n};\n\n/**\n * A condition to be used against `UserEmail` object types. All fields are tested\n * for equality and combined with a logical \u2018and.\u2019\n */\nexport type UserEmailCondition = {\n  /** Checks for equality with the object\u2019s `id` field. */\n  readonly id?: InputMaybe<Scalars[\"UUID\"][\"input\"]>;\n  /** Checks for equality with the object\u2019s `isPrimary` field. */\n  readonly isPrimary?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  /** Checks for equality with the object\u2019s `userId` field. */\n  readonly userId?: InputMaybe<Scalars[\"UUID\"][\"input\"]>;\n};\n\n/** An input for mutations affecting `UserEmail` */\nexport type UserEmailInput = {\n  /** The users email address, in `a@b.c` format. */\n  readonly email: Scalars[\"String\"][\"input\"];\n};\n\n/** A connection to a list of `UserEmail` values. */\nexport type UserEmailsConnection = {\n  /** A list of edges which contains the `UserEmail` and cursor to aid in pagination. */\n  readonly edges: ReadonlyArray<UserEmailsEdge>;\n  /** A list of `UserEmail` objects. */\n  readonly nodes: ReadonlyArray<UserEmail>;\n  /** Information to aid in pagination. */\n  readonly pageInfo: PageInfo;\n  /** The count of *all* `UserEmail` you could get from the connection. */\n  readonly totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** A `UserEmail` edge in the connection. */\nexport type UserEmailsEdge = {\n  /** A cursor for use in pagination. */\n  readonly cursor?: Maybe<Scalars[\"Cursor\"][\"output\"]>;\n  /** The `UserEmail` at the end of the edge. */\n  readonly node: UserEmail;\n};\n\n/** Methods to use when ordering `UserEmail`. */\nexport type UserEmailsOrderBy =\n  | \"ID_ASC\"\n  | \"ID_DESC\"\n  | \"IS_PRIMARY_ASC\"\n  | \"IS_PRIMARY_DESC\"\n  | \"NATURAL\"\n  | \"PRIMARY_KEY_ASC\"\n  | \"PRIMARY_KEY_DESC\"\n  | \"USER_ID_ASC\"\n  | \"USER_ID_DESC\";\n\n/** Represents an update to a `User`. Fields that are set will be updated. */\nexport type UserPatch = {\n  /** Optional avatar URL. */\n  readonly avatarUrl?: InputMaybe<Scalars[\"Url\"][\"input\"]>;\n  /** Public-facing name (or pseudonym) of the user. */\n  readonly name?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** Public-facing username (or 'handle') of the user. */\n  readonly username?: InputMaybe<Scalars[\"Username\"][\"input\"]>;\n};\n\nexport type UserRole = \"ADMIN\" | \"USER\";\n\nexport type UserSubscriptionPayload = {\n  readonly event?: Maybe<Scalars[\"String\"][\"output\"]>;\n  readonly user?: Maybe<User>;\n};\n\n/** A `User` edge in the connection. */\nexport type UsersEdge = {\n  /** A cursor for use in pagination. */\n  readonly cursor?: Maybe<Scalars[\"Cursor\"][\"output\"]>;\n  /** The `User` at the end of the edge. */\n  readonly node: User;\n};\n\n/** Methods to use when ordering `User`. */\nexport type UsersOrderBy =\n  | \"ID_ASC\"\n  | \"ID_DESC\"\n  | \"NATURAL\"\n  | \"PRIMARY_KEY_ASC\"\n  | \"PRIMARY_KEY_DESC\"\n  | \"USERNAME_ASC\"\n  | \"USERNAME_DESC\";\n\n/** All input for the `verifyEmail` mutation. */\nexport type VerifyEmailInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  readonly clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  readonly token: Scalars[\"String\"][\"input\"];\n  readonly userEmailId: Scalars[\"UUID\"][\"input\"];\n};\n\n/** The output of our `verifyEmail` mutation. */\nexport type VerifyEmailPayload = {\n  /**\n   * The exact same `clientMutationId` that was provided in the mutation input,\n   * unchanged and unused. May be used by a client to track mutations.\n   */\n  readonly clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** Our root query field type. Allows us to run any query from our mutation payload. */\n  readonly query?: Maybe<Query>;\n  readonly success?: Maybe<Scalars[\"Boolean\"][\"output\"]>;\n};\n\nexport type VoteType = \"DOWN\" | \"UP\";\n\nexport type AddEmailMutationVariables = Exact<{\n  email: Scalars[\"String\"][\"input\"];\n}>;\n\nexport type AddEmailMutation = {\n  readonly createUserEmail?: {\n    readonly user?: {\n      readonly id: string;\n      readonly userEmails: {\n        readonly nodes: ReadonlyArray<{\n          readonly id: string;\n          readonly email: string;\n          readonly isVerified: boolean;\n          readonly isPrimary: boolean;\n          readonly createdAt: string;\n        }>;\n      };\n    } | null;\n  } | null;\n};\n\nexport type ChangePasswordMutationVariables = Exact<{\n  oldPassword: Scalars[\"String\"][\"input\"];\n  newPassword: Scalars[\"String\"][\"input\"];\n}>;\n\nexport type ChangePasswordMutation = {\n  readonly changePassword?: { readonly success?: boolean | null } | null;\n};\n\nexport type ConfirmAccountDeletionMutationVariables = Exact<{\n  token: Scalars[\"String\"][\"input\"];\n}>;\n\nexport type ConfirmAccountDeletionMutation = {\n  readonly confirmAccountDeletion?: { readonly success?: boolean | null } | null;\n};\n\nexport type CreatePostMutationVariables = Exact<{\n  title: Scalars[\"String\"][\"input\"];\n  body: Scalars[\"String\"][\"input\"];\n  tags: ReadonlyArray<InputMaybe<Scalars[\"Tag\"][\"input\"]>> | InputMaybe<Scalars[\"Tag\"][\"input\"]>;\n}>;\n\nexport type CreatePostMutation = {\n  readonly createPost?: {\n    readonly post?: { readonly id: string; readonly createdAt: string } | null;\n  } | null;\n};\n\nexport type CurrentUserUpdatedSubscriptionVariables = Exact<{ [key: string]: never }>;\n\nexport type CurrentUserUpdatedSubscription = {\n  readonly currentUserUpdated?: {\n    readonly event?: string | null;\n    readonly user?: {\n      readonly id: string;\n      readonly username: string;\n      readonly name?: string | null;\n      readonly avatarUrl?: string | null;\n      readonly role: UserRole;\n      readonly isVerified: boolean;\n    } | null;\n  } | null;\n};\n\nexport type DeleteEmailMutationVariables = Exact<{\n  emailId: Scalars[\"UUID\"][\"input\"];\n}>;\n\nexport type DeleteEmailMutation = {\n  readonly deleteUserEmail?: {\n    readonly user?: {\n      readonly id: string;\n      readonly userEmails: {\n        readonly nodes: ReadonlyArray<{\n          readonly id: string;\n          readonly email: string;\n          readonly isVerified: boolean;\n          readonly isPrimary: boolean;\n          readonly createdAt: string;\n        }>;\n      };\n    } | null;\n  } | null;\n};\n\nexport type EmailsForm_UserEmailFragment = {\n  readonly id: string;\n  readonly email: string;\n  readonly isVerified: boolean;\n  readonly isPrimary: boolean;\n  readonly createdAt: string;\n};\n\nexport type ForgotPasswordMutationVariables = Exact<{\n  email: Scalars[\"String\"][\"input\"];\n}>;\n\nexport type ForgotPasswordMutation = {\n  readonly forgotPassword?: { readonly clientMutationId?: string | null } | null;\n};\n\nexport type LatestPostsQueryVariables = Exact<{ [key: string]: never }>;\n\nexport type LatestPostsQuery = {\n  readonly posts?: {\n    readonly nodes: ReadonlyArray<{\n      readonly id: string;\n      readonly title: string;\n      readonly body: string;\n      readonly tags: ReadonlyArray<string | null>;\n      readonly score?: number | null;\n      readonly createdAt: string;\n      readonly updatedAt: string;\n      readonly user?: { readonly username: string } | null;\n      readonly comments: { readonly totalCount: number };\n    }>;\n  } | null;\n  readonly currentUser?: {\n    readonly id: string;\n    readonly name?: string | null;\n    readonly username: string;\n    readonly avatarUrl?: string | null;\n    readonly role: UserRole;\n    readonly isVerified: boolean;\n  } | null;\n};\n\nexport type LoginMutationVariables = Exact<{\n  username: Scalars[\"String\"][\"input\"];\n  password: Scalars[\"String\"][\"input\"];\n}>;\n\nexport type LoginMutation = {\n  readonly login?: {\n    readonly user: {\n      readonly id: string;\n      readonly username: string;\n      readonly name?: string | null;\n    };\n  } | null;\n};\n\nexport type LogoutMutationVariables = Exact<{ [key: string]: never }>;\n\nexport type LogoutMutation = { readonly logout?: { readonly success?: boolean | null } | null };\n\nexport type MakeEmailPrimaryMutationVariables = Exact<{\n  emailId: Scalars[\"UUID\"][\"input\"];\n}>;\n\nexport type MakeEmailPrimaryMutation = {\n  readonly makeEmailPrimary?: {\n    readonly user?: {\n      readonly id: string;\n      readonly userEmails: {\n        readonly nodes: ReadonlyArray<{ readonly id: string; readonly isPrimary: boolean }>;\n      };\n    } | null;\n  } | null;\n};\n\nexport type PostFieldsFragment = {\n  readonly id: string;\n  readonly title: string;\n  readonly body: string;\n  readonly tags: ReadonlyArray<string | null>;\n  readonly score?: number | null;\n  readonly createdAt: string;\n  readonly updatedAt: string;\n  readonly user?: { readonly username: string } | null;\n  readonly comments: { readonly totalCount: number };\n};\n\nexport type RegisterMutationVariables = Exact<{\n  username: Scalars[\"String\"][\"input\"];\n  password: Scalars[\"String\"][\"input\"];\n  email: Scalars[\"String\"][\"input\"];\n  name?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n}>;\n\nexport type RegisterMutation = {\n  readonly register?: {\n    readonly user: {\n      readonly id: string;\n      readonly username: string;\n      readonly name?: string | null;\n    };\n  } | null;\n};\n\nexport type RequestAccountDeletionMutationVariables = Exact<{ [key: string]: never }>;\n\nexport type RequestAccountDeletionMutation = {\n  readonly requestAccountDeletion?: { readonly success?: boolean | null } | null;\n};\n\nexport type ResendEmailVerificationMutationVariables = Exact<{\n  emailId: Scalars[\"UUID\"][\"input\"];\n}>;\n\nexport type ResendEmailVerificationMutation = {\n  readonly resendEmailVerificationCode?: { readonly success?: boolean | null } | null;\n};\n\nexport type ResetPasswordMutationVariables = Exact<{\n  userId: Scalars[\"UUID\"][\"input\"];\n  token: Scalars[\"String\"][\"input\"];\n  password: Scalars[\"String\"][\"input\"];\n}>;\n\nexport type ResetPasswordMutation = {\n  readonly resetPassword?: { readonly success?: boolean | null } | null;\n};\n\nexport type ProfileSettingsQueryVariables = Exact<{ [key: string]: never }>;\n\nexport type ProfileSettingsQuery = {\n  readonly currentUser?: {\n    readonly id: string;\n    readonly isVerified: boolean;\n    readonly hasPassword?: boolean | null;\n    readonly name?: string | null;\n    readonly username: string;\n    readonly avatarUrl?: string | null;\n    readonly role: UserRole;\n    readonly userEmails: {\n      readonly nodes: ReadonlyArray<{\n        readonly id: string;\n        readonly email: string;\n        readonly isVerified: boolean;\n        readonly isPrimary: boolean;\n        readonly createdAt: string;\n      }>;\n    };\n    readonly authentications: ReadonlyArray<{\n      readonly id: string;\n      readonly service: string;\n      readonly identifier: string;\n      readonly createdAt: string;\n    }>;\n  } | null;\n};\n\nexport type SharedLayoutQueryVariables = Exact<{ [key: string]: never }>;\n\nexport type SharedLayoutQuery = {\n  readonly currentUser?: {\n    readonly id: string;\n    readonly name?: string | null;\n    readonly username: string;\n    readonly avatarUrl?: string | null;\n    readonly role: UserRole;\n    readonly isVerified: boolean;\n  } | null;\n};\n\nexport type SharedLayout_QueryFragment = {\n  readonly currentUser?: {\n    readonly id: string;\n    readonly name?: string | null;\n    readonly username: string;\n    readonly avatarUrl?: string | null;\n    readonly role: UserRole;\n    readonly isVerified: boolean;\n  } | null;\n};\n\nexport type SharedLayout_UserFragment = {\n  readonly id: string;\n  readonly name?: string | null;\n  readonly username: string;\n  readonly avatarUrl?: string | null;\n  readonly role: UserRole;\n  readonly isVerified: boolean;\n};\n\nexport type UnlinkUserAuthenticationMutationVariables = Exact<{\n  id: Scalars[\"UUID\"][\"input\"];\n}>;\n\nexport type UnlinkUserAuthenticationMutation = {\n  readonly deleteUserAuthentication?: {\n    readonly user?: {\n      readonly id: string;\n      readonly userAuthenticationsList: ReadonlyArray<{\n        readonly id: string;\n        readonly identifier: string;\n        readonly service: string;\n        readonly createdAt: string;\n      }>;\n    } | null;\n  } | null;\n};\n\nexport type UpdateUserMutationVariables = Exact<{\n  id: Scalars[\"UUID\"][\"input\"];\n  patch: UserPatch;\n}>;\n\nexport type UpdateUserMutation = {\n  readonly updateUser?: {\n    readonly clientMutationId?: string | null;\n    readonly user?: {\n      readonly id: string;\n      readonly name?: string | null;\n      readonly username: string;\n    } | null;\n  } | null;\n};\n\nexport type VerifyEmailMutationVariables = Exact<{\n  id: Scalars[\"UUID\"][\"input\"];\n  token: Scalars[\"String\"][\"input\"];\n}>;\n\nexport type VerifyEmailMutation = {\n  readonly verifyEmail?: {\n    readonly success?: boolean | null;\n    readonly query?: {\n      readonly currentUser?: {\n        readonly id: string;\n        readonly name?: string | null;\n        readonly username: string;\n        readonly avatarUrl?: string | null;\n        readonly role: UserRole;\n        readonly isVerified: boolean;\n      } | null;\n    } | null;\n  } | null;\n};\n\nexport const EmailsForm_UserEmailFragmentDoc = gql`\n  fragment EmailsForm_UserEmail on UserEmail {\n    id\n    email\n    isVerified\n    isPrimary\n    createdAt\n  }\n` as unknown as DocumentNode<EmailsForm_UserEmailFragment, unknown>;\nexport const PostFieldsFragmentDoc = gql`\n  fragment PostFields on Post {\n    id\n    user {\n      username\n    }\n    title\n    body\n    tags\n    score\n    comments {\n      totalCount\n    }\n    createdAt\n    updatedAt\n  }\n` as unknown as DocumentNode<PostFieldsFragment, unknown>;\nexport const SharedLayout_UserFragmentDoc = gql`\n  fragment SharedLayout_User on User {\n    id\n    name\n    username\n    avatarUrl\n    role\n    isVerified\n  }\n` as unknown as DocumentNode<SharedLayout_UserFragment, unknown>;\nexport const SharedLayout_QueryFragmentDoc = gql`\n  fragment SharedLayout_Query on Query {\n    currentUser {\n      ...SharedLayout_User\n    }\n  }\n  ${SharedLayout_UserFragmentDoc}\n` as unknown as DocumentNode<SharedLayout_QueryFragment, unknown>;\nexport const AddEmailDocument = gql`\n  mutation AddEmail($email: String!) {\n    createUserEmail(input: { userEmail: { email: $email } }) {\n      user {\n        id\n        userEmails(first: 50) {\n          nodes {\n            id\n            ...EmailsForm_UserEmail\n          }\n        }\n      }\n    }\n  }\n  ${EmailsForm_UserEmailFragmentDoc}\n` as unknown as DocumentNode<AddEmailMutation, AddEmailMutationVariables>;\nexport const ChangePasswordDocument = gql`\n  mutation ChangePassword($oldPassword: String!, $newPassword: String!) {\n    changePassword(input: { oldPassword: $oldPassword, newPassword: $newPassword }) {\n      success\n    }\n  }\n` as unknown as DocumentNode<ChangePasswordMutation, ChangePasswordMutationVariables>;\nexport const ConfirmAccountDeletionDocument = gql`\n  mutation ConfirmAccountDeletion($token: String!) {\n    confirmAccountDeletion(input: { token: $token }) {\n      success\n    }\n  }\n` as unknown as DocumentNode<\n  ConfirmAccountDeletionMutation,\n  ConfirmAccountDeletionMutationVariables\n>;\nexport const CreatePostDocument = gql`\n  mutation CreatePost($title: String!, $body: String!, $tags: [Tag]!) {\n    createPost(input: { post: { title: $title, body: $body, tags: $tags } }) {\n      post {\n        id\n        createdAt\n      }\n    }\n  }\n` as unknown as DocumentNode<CreatePostMutation, CreatePostMutationVariables>;\nexport const CurrentUserUpdatedDocument = gql`\n  subscription CurrentUserUpdated {\n    currentUserUpdated {\n      event\n      user {\n        id\n        username\n        name\n        avatarUrl\n        role\n        isVerified\n      }\n    }\n  }\n` as unknown as DocumentNode<\n  CurrentUserUpdatedSubscription,\n  CurrentUserUpdatedSubscriptionVariables\n>;\nexport const DeleteEmailDocument = gql`\n  mutation DeleteEmail($emailId: UUID!) {\n    deleteUserEmail(input: { id: $emailId }) {\n      user {\n        id\n        userEmails(first: 50) {\n          nodes {\n            id\n            ...EmailsForm_UserEmail\n          }\n        }\n      }\n    }\n  }\n  ${EmailsForm_UserEmailFragmentDoc}\n` as unknown as DocumentNode<DeleteEmailMutation, DeleteEmailMutationVariables>;\nexport const ForgotPasswordDocument = gql`\n  mutation ForgotPassword($email: String!) {\n    forgotPassword(input: { email: $email }) {\n      clientMutationId\n    }\n  }\n` as unknown as DocumentNode<ForgotPasswordMutation, ForgotPasswordMutationVariables>;\nexport const LatestPostsDocument = gql`\n  query LatestPosts {\n    ...SharedLayout_Query\n    posts(orderBy: CREATED_AT_DESC) {\n      nodes {\n        ...PostFields\n      }\n    }\n  }\n  ${SharedLayout_QueryFragmentDoc}\n  ${PostFieldsFragmentDoc}\n` as unknown as DocumentNode<LatestPostsQuery, LatestPostsQueryVariables>;\nexport const LoginDocument = gql`\n  mutation Login($username: String!, $password: String!) {\n    login(input: { username: $username, password: $password }) {\n      user {\n        id\n        username\n        name\n      }\n    }\n  }\n` as unknown as DocumentNode<LoginMutation, LoginMutationVariables>;\nexport const LogoutDocument = gql`\n  mutation Logout {\n    logout {\n      success\n    }\n  }\n` as unknown as DocumentNode<LogoutMutation, LogoutMutationVariables>;\nexport const MakeEmailPrimaryDocument = gql`\n  mutation MakeEmailPrimary($emailId: UUID!) {\n    makeEmailPrimary(input: { emailId: $emailId }) {\n      user {\n        id\n        userEmails(first: 50) {\n          nodes {\n            id\n            isPrimary\n          }\n        }\n      }\n    }\n  }\n` as unknown as DocumentNode<MakeEmailPrimaryMutation, MakeEmailPrimaryMutationVariables>;\nexport const RegisterDocument = gql`\n  mutation Register($username: String!, $password: String!, $email: String!, $name: String) {\n    register(input: { username: $username, password: $password, email: $email, name: $name }) {\n      user {\n        id\n        username\n        name\n      }\n    }\n  }\n` as unknown as DocumentNode<RegisterMutation, RegisterMutationVariables>;\nexport const RequestAccountDeletionDocument = gql`\n  mutation RequestAccountDeletion {\n    requestAccountDeletion(input: {}) {\n      success\n    }\n  }\n` as unknown as DocumentNode<\n  RequestAccountDeletionMutation,\n  RequestAccountDeletionMutationVariables\n>;\nexport const ResendEmailVerificationDocument = gql`\n  mutation ResendEmailVerification($emailId: UUID!) {\n    resendEmailVerificationCode(input: { emailId: $emailId }) {\n      success\n    }\n  }\n` as unknown as DocumentNode<\n  ResendEmailVerificationMutation,\n  ResendEmailVerificationMutationVariables\n>;\nexport const ResetPasswordDocument = gql`\n  mutation ResetPassword($userId: UUID!, $token: String!, $password: String!) {\n    resetPassword(input: { userId: $userId, resetToken: $token, newPassword: $password }) {\n      success\n    }\n  }\n` as unknown as DocumentNode<ResetPasswordMutation, ResetPasswordMutationVariables>;\nexport const ProfileSettingsDocument = gql`\n  query ProfileSettings {\n    ...SharedLayout_Query\n    currentUser {\n      id\n      isVerified\n      hasPassword\n      userEmails(first: 50) {\n        nodes {\n          id\n          email\n          isVerified\n          isPrimary\n          createdAt\n        }\n      }\n      authentications: userAuthenticationsList(first: 50) {\n        id\n        service\n        identifier\n        createdAt\n      }\n    }\n  }\n  ${SharedLayout_QueryFragmentDoc}\n` as unknown as DocumentNode<ProfileSettingsQuery, ProfileSettingsQueryVariables>;\nexport const SharedLayoutDocument = gql`\n  query SharedLayout {\n    ...SharedLayout_Query\n  }\n  ${SharedLayout_QueryFragmentDoc}\n` as unknown as DocumentNode<SharedLayoutQuery, SharedLayoutQueryVariables>;\nexport const UnlinkUserAuthenticationDocument = gql`\n  mutation UnlinkUserAuthentication($id: UUID!) {\n    deleteUserAuthentication(input: { id: $id }) {\n      user {\n        id\n        userAuthenticationsList(first: 50) {\n          id\n          identifier\n          service\n          createdAt\n        }\n      }\n    }\n  }\n` as unknown as DocumentNode<\n  UnlinkUserAuthenticationMutation,\n  UnlinkUserAuthenticationMutationVariables\n>;\nexport const UpdateUserDocument = gql`\n  mutation UpdateUser($id: UUID!, $patch: UserPatch!) {\n    updateUser(input: { id: $id, patch: $patch }) {\n      clientMutationId\n      user {\n        id\n        name\n        username\n      }\n    }\n  }\n` as unknown as DocumentNode<UpdateUserMutation, UpdateUserMutationVariables>;\nexport const VerifyEmailDocument = gql`\n  mutation VerifyEmail($id: UUID!, $token: String!) {\n    verifyEmail(input: { userEmailId: $id, token: $token }) {\n      success\n      query {\n        ...SharedLayout_Query\n      }\n    }\n  }\n  ${SharedLayout_QueryFragmentDoc}\n` as unknown as DocumentNode<VerifyEmailMutation, VerifyEmailMutationVariables>;\n", "import React, { useState, useCallback, useContext } from \"react\";\nimport { ensureArray, extractError, getCodeFromError, uniq } from \"../lib\";\n\nexport * from \"./Layout\";\n\ntype ElementType<P> = string | ((a: P) => React.ReactNode);\n\nexport function Card<T>({\n  children,\n  className,\n  as: As = \"div\",\n  ...props\n}: {\n  children: React.ReactNode;\n  className?: string;\n  as?: ElementType<T>;\n} & React.ComponentPropsWithoutRef<T>) {\n  return (\n    <As\n      className={clsx(\n        \"bg-gray-100 dark:bg-gray-700 p-4 shadow-md dark:text-primary-50\",\n        className,\n      )}\n      {...props}\n    >\n      {children}\n    </As>\n  );\n}\n\nexport function Container({\n  children,\n  className,\n  as: As = \"div\",\n  ...props\n}: {\n  children: React.ReactNode;\n  className?: string;\n  as?: ElementType;\n}) {\n  return (\n    <As className={clsx(\"flex flex-col gap-4\", className)} {...props}>\n      {children}\n    </As>\n  );\n}\n\nexport function Danger({\n  children,\n  as: As = \"span\",\n  className,\n  ...props\n}: {\n  children: React.ReactNode;\n  className?: string;\n  as?: ElementType;\n}) {\n  return (\n    <As className={clsx(\"text-red-700\", className)} {...props}>\n      {children}\n    </As>\n  );\n}\n\nexport function Button({\n  className,\n  variant = \"default\",\n  children,\n  ...props\n}: { variant?: \"danger\" | \"primary\" | \"default\" } & React.ButtonHTMLAttributes<HTMLButtonElement>) {\n  return (\n    <button\n      {...props}\n      className={clsx(\n          variant === \"primary\" ? \"bg-primary-600 text-primary-100 hover:bg-primary-500\"\n        : variant === \"danger\" ? \"bg-red-100 text-red-900 border border-red-300 hover:bg-red-200\"\n        : \"bg-primary-200 text-primary-900 hover:bg-primary-100\",\n        `\n          border-0\n          focus:outline-primary-700\n          focus:ring-1\n          focus:ring-primary-700\n          focus:translate-x-0\n          font-semibold\n          hover:-translate-y-px\n          hover:shadow-lg\n          p-2\n          rounded\n          shadow-sm\n        `.replace(/\\s+/g, \" \"),\n        className,\n      )}\n    >\n      {children}\n    </button>\n  );\n}\n\nexport function Input({\n  className,\n  ...props\n}:\n  | React.InputHTMLAttributes<HTMLInputElement>\n  | ({\n      type: \"textarea\";\n    } & React.TextareaHTMLAttributes<HTMLTextAreaElement>)) {\n  const commonClasses = `\n    bg-primary-50\n    border-0\n    dark:bg-primary-600\n    dark:placeholder:text-primary-400\n    dark:text-primary-100\n    focus:ring-2\n    focus:ring-inset\n    focus:ring-primary-400\n    focus:shadow-none\n    outline\n    outline-1\n    outline-primary-300\n    hover:outline-primary-400\n    dark:outline-primary-500\n    dark:hover:outline-primary-400\n    rounded\n    shadow-md\n    text-sm\n    w-full\n  `.replace(/\\s+/g, \" \");\n  return props.type ===\n    \"textarea\" /* @ts-expect-error polymorphism is a pain to type properly */ ? (\n    <textarea {...props} className={clsx(\"form-textarea\", commonClasses, className)}>\n      {props.value}\n    </textarea>\n  ) : (\n    /* @ts-expect-error polymorphism is a pain to type properly */\n    <input {...props} className={clsx(\"form-input block\", commonClasses, className)} />\n  );\n}\n\nexport function Legend<T>({\n  className = \"\",\n  as: As = \"legend\",\n  ...props\n}: {\n  as?: ElementType<T>;\n} & React.DetailedHTMLProps<React.HTMLAttributes<HTMLLegendElement>, HTMLLegendElement>) {\n  return (\n    <As\n      className={clsx(\n        \"p-2 -rotate-1 -skew-y-1 shadow-md italic font-medium\",\n        // !/\\btext-/.test(className) &&\n        \"text-primary-800\",\n        // !/\\bbg-/.test(className) &&\n        \"bg-primary-100\",\n        className,\n      )}\n      {...props}\n    >\n      {props.children}\n    </As>\n  );\n}\n\nconst formCtx = React.createContext<\n  | {\n      setErrors(a: Array<string> | null): void;\n      errors: Array<string> | null | undefined;\n    }\n  | undefined\n>(undefined);\n\nexport function Form({\n  children,\n  onSubmit,\n  ...props\n}: {\n  children: React.ReactNode | ((props: { errors: Array<string> | null }) => React.ReactNode);\n  onSubmit: (args: {\n    event: React.FormEvent<HTMLFormElement>;\n    setErrors: (err: Error | null | string | Array<string>) => void;\n    values: Record<string, any>;\n  }) => Promise<void> | void;\n} & Omit<React.FormHTMLAttributes<HTMLFormElement>, \"onSubmit\" | \"children\">) {\n  const [errors, _setErrors] = useState<null | Array<string>>();\n  const setErrors = useCallback((str: Error | null | string | Array<string>) => {\n    _setErrors(s => {\n      if (str == null) return null;\n      return (s || []).concat(str instanceof Error ? str.message : str);\n    });\n  }, []);\n\n  return (\n    <formCtx.Provider value={{ setErrors, errors }}>\n      <form\n        {...props}\n        onSubmit={async event => {\n          event.preventDefault();\n          setErrors(null);\n          const values = Object.fromEntries(new FormData(event.currentTarget));\n          try {\n            await onSubmit({ event, values, setErrors });\n          } catch (err) {\n            const code = getCodeFromError(err);\n            switch (code) {\n              case \"CREDS\":\n                setErrors(\"Incorrect username or password\");\n                break;\n              case \"MODAT\":\n                setErrors(\"Email is required\");\n                break;\n              case \"WEAKP\":\n                setErrors(\"Password is too weak or too common, please make it stronger\");\n                break;\n              case \"EMTKN\":\n                setErrors(\n                  \"An account with this email address has already been registered, consider using the 'Forgot passphrase' function.\",\n                );\n                break;\n              case \"NUNIQ\":\n                setErrors(\n                  \"An account with this username has already been registered, please try a different username.\",\n                );\n                break;\n              default:\n                throw extractError(err);\n            }\n          }\n        }}\n      >\n        {typeof children === \"function\" ? children({ errors }) : children}\n      </form>\n    </formCtx.Provider>\n  );\n}\n\nexport function FormErrors(props: { errors?: null | string | Error | Array<string | Error> }) {\n  if (!props.errors) return null;\n  const errs = ensureArray(props.errors);\n  return (\n    <Container>\n      {errs.map(err => (\n        <Danger as=\"div\" key={err}>\n          {typeof err === \"string\" ? err : err.message}\n        </Danger>\n      ))}\n    </Container>\n  );\n}\n\nexport function FormRow({\n  label,\n  children,\n  className,\n}: {\n  label?: React.ReactNode;\n  children: React.ReactNode;\n  className?: string;\n}) {\n  return (\n    <label className={clsx(\"flex flex-col sm:flex-row sm:items-center\", className)}>\n      {label && <span className=\"sm:w-5/12\">{label}</span>}\n      <span className={clsx(label && \"sm:w-7/12\")}>{children}</span>\n    </label>\n  );\n}\n\n/**\n * Sort of like the\n `classnames` module, but a bit simpler\n * @param {...Array<any>} args\n * @returns {string} string\n */\nexport function clsx(...args: Array<any>): string {\n  const classes: Array<string> = [];\n\n  for (const arg of args) {\n    if (!arg) continue;\n\n    if (typeof arg === \"string\" || typeof arg === \"number\") {\n      classes.push(arg.toString());\n    } else if (Array.isArray(arg) && arg.length) {\n      const inner = clsx(...arg);\n\n      if (inner) {\n        classes.push(inner);\n      }\n    } else if (typeof arg === \"object\") {\n      for (const key in arg) {\n        if ({}.hasOwnProperty.call(arg, key) && arg[key]) {\n          classes.push(key);\n        }\n      }\n    }\n  }\n\n  return classes.join(\" \");\n}\n\nexport function Stringify<T>(props: T) {\n  return <pre>{JSON.stringify(props, null, 2)}</pre>;\n}\n\nconst SocialLoginServices = [\"GitHub\"];\nexport function SocialLogin({\n  label,\n  redirectTo,\n}: {\n  redirectTo?: string;\n  label: string | ((service: string) => string);\n}) {\n  if (SocialLoginServices.length < 1) return null\n  return (\n    <div className=\"text-center\">\n      {SocialLoginServices.map(service => (\n        <Button variant=\"primary\" key={service}>\n          <a\n            href={`/auth/${service.toLowerCase()}${\n              redirectTo ? `?redirectTo=${encodeURIComponent(redirectTo)}` : \"\"\n            }`}\n          >\n            {typeof label === \"function\" ? label(service) : `${label} with ${service}`}\n          </a>\n        </Button>\n      ))}\n    </div>\n  );\n}\n", "import { GraphQLError } from \"graphql\";\nimport { useNavigate } from \"react-router-dom\";\nimport { startTransition } from \"react\";\n\nexport async function useLogout() {\n  const navigate = useNavigate();\n  return function logout() {\n    startTransition(() => {\n      navigate(\"/\");\n    });\n  };\n}\n\nexport function ensureArray<T>(input: T | null | undefined | Array<T>): Array<T> {\n  if (!input) return [];\n  return Array.isArray(input) ? input : [input];\n}\n\nexport function uniq<T>(input: Array<T>): Array<T> {\n  return Array.from(new Set(input));\n}\n\nexport function extractError(error: null): null;\nexport function extractError(error: Error): Error;\nexport function extractError(error: ApolloError): GraphQLError;\nexport function extractError(error: GraphQLError): GraphQLError;\nexport function extractError(\n  error: null | Error | ApolloError | GraphQLError,\n): null | Error | GraphQLError;\nexport function extractError(\n  error: null | Error | ApolloError | GraphQLError,\n): null | Error | GraphQLError {\n  return (\n    (error &&\n      \"graphQLErrors\" in error &&\n      error.graphQLErrors &&\n      error.graphQLErrors.length &&\n      error.graphQLErrors[0]) ||\n    error\n  );\n}\n\nexport function getExceptionFromError(error: null | Error | ApolloError | GraphQLError):\n  | (Error & {\n    code?: string;\n    fields?: string[];\n    extensions?: { code?: string; fields?: string[] };\n  })\n  | null {\n  // @ts-ignore\n  const graphqlError: GraphQLError = extractError(error);\n  const exception = graphqlError && graphqlError.extensions && graphqlError.extensions.exception;\n  return (exception || graphqlError || error) as Error | null;\n}\n\nexport function getCodeFromError(error: null | Error | ApolloError | GraphQLError): null | string {\n  const err = getExceptionFromError(error);\n  return err?.extensions?.code ?? err?.code ?? null;\n}\n", "import React from \"react\";\nimport { SharedLayoutQuery, SharedLayout_UserFragment } from \"~/generated\";\nimport { Button, clsx } from \"~/components\";\nimport { useLogout } from \"../lib\";\nimport { NavLink, NavLinkProps, useNavigate, useLocation, useLoaderData } from \"@remix-run/react\";\nimport { ErrorBoundary as DefaultErrorBoundary } from \"react-error-boundary\";\n\nconst NavStyles: NavLinkProps[\"className\"] = function NavStyles(route) {\n  return clsx(\n    route.isActive ? \"font-bold decoration-primary-200\" : \"decoration-primary-400\",\n    \"underline hover:decoration-primary-200 decoration-thick decoration-2\",\n  );\n};\n\nfunction Nav({ currentUser }: { currentUser: SharedLayoutQuery[\"currentUser\"] }) {\n  const logout = useLogout();\n  const navigate = useNavigate();\n  return (\n    <header>\n      <nav className=\"border-b border-primary-500 text-primary-100 bg-primary-800 border-primary-540 mb-4 tracking-tight\">\n        <ul className=\"flex flex-row justify-between gap-4 p-4\">\n          <div>\n            <li>\n              <NavLink to=\"/\" className={NavStyles}>\n                home\n              </NavLink>\n            </li>\n          </div>\n          <div className=\"flex flex-row gap-4\">\n            {currentUser ? (\n              <>\n                <div className=\"border-r border-primary-400 pr-4\">\n                  signed in as <span className=\"font-bold\">{currentUser.username}</span>\n                </div>\n                <li>\n                  <NavLink to=\"/settings\" className={NavStyles}>\n                    settings\n                  </NavLink>\n                </li>\n                <li>\n                  <a\n                    href=\"/logout\"\n                    className={NavStyles?.({})}\n                    onClick={() => {\n                      void logout();\n                    }}\n                  >\n                    sign out\n                  </a>\n                </li>\n              </>\n            ) : (\n              <>\n                <li>\n                  <NavLink to=\"/signup\" className={NavStyles({ isActive: true })}>\n                    create an account\n                  </NavLink>\n                </li>\n                <li>\n                  <NavLink to=\"/signin\" className={NavStyles}>\n                    sign in\n                  </NavLink>\n                </li>\n              </>\n            )}\n          </div>\n        </ul>\n      </nav>\n    </header>\n  );\n}\n\nenum AuthRestrict {\n  NEVER = 0,\n  LOGGED_OUT = 1 << 0,\n  LOGGED_IN = 1 << 1,\n  NOT_MOD = 1 << 2,\n  NOT_ADMIN = 1 << 3,\n}\n\nexport function Layout({\n  children: children,\n  forbidWhen: when = auth => auth.NEVER,\n}: {\n  children: React.ReactNode;\n  forbidWhen?: (auth: typeof AuthRestrict) => AuthRestrict;\n}) {\n  const location = useLocation();\n  const navigate = useNavigate();\n  const data = useLoaderData();\n  if (!(data && \"currentUser\" in data)) throw new Error(\"missing user data!\");\n  const currentUser = data.currentUser as null | SharedLayout_UserFragment;\n\n  const forbidWhen = when(AuthRestrict);\n  const forbidsLoggedOut = forbidWhen & AuthRestrict.LOGGED_OUT;\n  const forbidsLoggedIn = forbidWhen & AuthRestrict.LOGGED_IN;\n  const forbidsNotMod = forbidWhen & AuthRestrict.NOT_MOD;\n  const forbidsNotAdmin = forbidWhen & AuthRestrict.NOT_ADMIN;\n  if (currentUser && (forbidsLoggedIn || (forbidsNotAdmin && currentUser.role !== \"ADMIN\"))) {\n    navigate(\"/\", { replace: true });\n    return null;\n  } else if (currentUser == null && forbidsLoggedOut) {\n    navigate(`/signup?next=${encodeURIComponent(location.pathname)}`, { replace: true });\n    return null;\n  }\n\n  return (\n    <>\n      <Nav currentUser={currentUser} />\n      <ErrorBoundary>{children}</ErrorBoundary>\n    </>\n  );\n}\n\nexport function ErrorBoundary({ children }: { children: React.ReactNode }) {\n  return (\n    <DefaultErrorBoundary\n      fallbackRender={({ error, resetErrorBoundary }) => (\n        <div className=\"error\">\n          <span>uh oh, there was an error :(</span>\n          <pre>{JSON.stringify(error, null, 2)}</pre>\n          <Button onClick={resetErrorBoundary}>reset</Button>\n        </div>\n      )}\n    >\n      {children}\n    </DefaultErrorBoundary>\n  );\n}\n", "import { useState } from \"react\";\nimport { json, type ActionArgs, type LoaderArgs } from \"@remix-run/node\";\nimport { Form, useActionData, useLoaderData, useNavigation } from \"@remix-run/react\";\nimport { Layout, Card, Legend, Container, Input, FormErrors, Button } from \"~/components\";\nimport { CreatePostDocument, LatestPostsDocument } from \"~/generated\";\nimport { Post } from \"./post\";\nimport { fromGraphQL } from \"~/middleware\";\n\nexport async function loader({ context: { graphql } }: LoaderArgs) {\n  const { data } = await graphql(LatestPostsDocument);\n  return json(data);\n}\n\nexport default function Index() {\n  const [showForm, setShowForm] = useState(false);\n  const data = useLoaderData<typeof loader>();\n  const actionData = useActionData<typeof action>();\n  const navigation = useNavigation();\n  console.log(navigation);\n  return (\n    <Layout>\n      {data?.currentUser && showForm ? (\n        <Form method=\"post\" className=\"max-w-2xl mx-auto\">\n          <Card as=\"fieldset\">\n            <Legend>new post</Legend>\n            <Container>\n              <Input placeholder=\"title\" type=\"text\" name=\"title\" required />\n              <Input placeholder=\"body\" type=\"textarea\" name=\"body\" required />\n              <div className=\"flex flex-row gap-4 [&>*]:grow\">\n                <Button variant=\"primary\" type=\"submit\">\n                  send\n                </Button>\n                <Button type=\"reset\">cancel</Button>\n              </div>\n            </Container>\n            <FormErrors />\n          </Card>\n        </Form>\n      ) : data?.currentUser ? (\n        <div className=\"text-center\">\n          <Button\n            variant=\"primary\"\n            className=\"text-2xl font-bold px-4\"\n            disabled={navigation.state !== \"idle\"}\n            onClick={() => setShowForm(true)}\n          >\n            create post\n          </Button>\n        </div>\n      ) : null}\n      <div className=\"flex flex-row flex-wrap gap-4 shrink-0\">\n        {data?.posts?.nodes.map(post => (\n          <Post key={post.id} {...post} />\n        ))}\n      </div>\n    </Layout>\n  );\n}\n\nexport async function action({ request, context: { graphql } }: ActionArgs) {\n  const variables = Object.fromEntries(await request.formData());\n  variables.tags = [\"test\"];\n  try {\n    const { data, errors } = await graphql(CreatePostDocument, variables);\n    if (errors) throw errors[0];\n    return json(data);\n  } catch (err) {\n    console.error(err);\n    throw err;\n  }\n}\n", "import { Card } from \"~/components\";\nimport { type PostFieldsFragment } from \"~/generated\";\nimport ago from \"s-ago\";\n\nexport function Post(post: PostFieldsFragment) {\n  if (!post) return null;\n  const createdAt = new Date(post.createdAt);\n  return (\n    <Card>\n      <h2 className=\"text-3xl font-bold\">{post.title}</h2>\n      {!post.body ? null : (\n        <div className=\"prose max-h-[80vh] overflow-auto\">\n          {post.body.split(\"\\n\\n\").map((p, i) => (\n            <p key={i}>{p}</p>\n          ))}\n        </div>\n      )}\n      <ul className=\"flex flex-row gap-2 items-baseline\">\n        <span className=\"text-primary-100 bg-primary-700 p-1\">by {post.user?.username}</span>\n        {post.tags.map(t => (\n          <li key={t} className=\"text-primary-100 bg-primary-700 p-1\">\n            #{t}\n          </li>\n        ))}\n        <span className=\"bg-gray-50\">{ago(createdAt)}</span>\n      </ul>\n    </Card>\n  );\n}\n", "import { Button, Container, Card, FormRow, Input, Layout, Legend, FormErrors } from \"~/components\";\nimport { ActionArgs, LoaderArgs } from \"@remix-run/node\";\nimport { ForgotPasswordDocument, SharedLayoutDocument } from \"~/generated\";\nimport { Form, useActionData, useNavigation } from \"@remix-run/react\";\n\nexport async function loader({ context: { graphql } }: LoaderArgs) {\n  const { data } = await graphql(SharedLayoutDocument);\n  return data;\n}\n\nexport default function ForgotPassword() {\n  const actionData = useActionData();\n  const navigation = useNavigation();\n  if (actionData) console.log(actionData);\n  return (\n    <Layout forbidWhen={auth => auth.LOGGED_IN}>\n      {navigation.state !== \"idle\" ? (\n        <Card>\n          We&apos;ve sent a link to your email. Please check your email and click the link and\n          follow the instructions. If you don&apos;t receive the link, please ensure you entered the\n          email address correctly, and check in your spam folder just in case.\n        </Card>\n      ) : (\n        <Form method=\"post\" className=\"mx-auto md:max-w-4xl p-4\">\n          <Card as=\"fieldset\">\n            <Legend>forgot password</Legend>\n            <Container>\n              <FormRow label=\"email:\">\n                <Input name=\"email\" type=\"email\" required />\n              </FormRow>\n              <div>\n                <Button type=\"submit\">Reset Password</Button>\n              </div>\n              <FormErrors />\n            </Container>\n          </Card>\n        </Form>\n      )}\n    </Layout>\n  );\n}\nexport async function action({ request, context: { graphql } }: ActionArgs) {\n  const values = Object.fromEntries(await request.formData());\n  console.log(\"received reset request for\", values);\n  const { data } = await graphql(ForgotPasswordDocument, values);\n  console.log(data);\n  return data;\n}\n", "import React, { startTransition } from \"react\";\nimport { Form, Link, useNavigate, useSearchParams } from \"@remix-run/react\";\nimport { SharedLayoutDocument, LoginDocument } from \"../generated\";\nimport {\n  Layout,\n  Card,\n  Input,\n  FormRow,\n  Button,\n  FormErrors,\n  Container,\n  Legend,\n  SocialLogin,\n} from \"../components\";\nimport { ActionArgs, LoaderArgs, json, redirect } from \"@remix-run/node\";\n\nexport async function loader({ context: { graphql } }: LoaderArgs) {\n  const { data } = await graphql(SharedLayoutDocument);\n  return json(data);\n}\n\nexport default function Login() {\n  const [params] = useSearchParams();\n  const redirectTo = params.get(\"redirectTo\") ?? undefined;\n  return (\n    <Layout forbidWhen={auth => auth.LOGGED_IN}>\n      <Form method=\"post\" className=\"mx-auto max-w-4xl\">\n        <Card as=\"fieldset\">\n          <Legend>log in</Legend>\n          <div className=\"pb-4 border-b border-primary-300\">\n            <SocialLogin label=\"log in\" redirectTo={redirectTo} />\n          </div>\n          <Container className=\"mt-4\">\n            <FormRow label={<span>username:</span>}>\n              <Input type=\"text\" name=\"username\" placeholder=\"or email\" required />\n            </FormRow>\n            <FormRow label={<span>password:</span>}>\n              <Input type=\"password\" name=\"password\" placeholder=\"********\" required />\n            </FormRow>\n            <div className=\"flex flex-col gap-4\">\n              <Button variant=\"primary\" type=\"submit\">\n                log in\n              </Button>\n              <FormErrors />\n              <Link to=\"/forgot\">forgot your password?</Link>\n            </div>\n          </Container>\n        </Card>\n      </Form>\n    </Layout>\n  );\n}\nexport async function action({ request, context: { graphql } }: ActionArgs) {\n  const variables = Object.fromEntries(await request.formData());\n  const searchParams = new URL(request.url).searchParams;\n  const params = Object.fromEntries(searchParams);\n  if (!(\"username\" in variables)) throw new Error(\"missing username\");\n  if (!(\"password\" in variables)) throw new Error(\"missing password\");\n  console.log({ params, searchParams });\n  const { data, errors } = await graphql(LoginDocument, variables);\n  if (errors) throw errors;\n  if (!data?.login?.user.id) throw new Error(\"error in login?\");\n  return redirect(params.redirectTo || \"/\");\n}\n", "import {\n  Layout,\n  Card,\n  Input,\n  FormRow,\n  Button,\n  FormErrors,\n  Legend,\n  Container,\n  Danger,\n  SocialLogin,\n} from \"~/components\";\nimport { Form, useLoaderData } from \"@remix-run/react\";\nimport { RegisterDocument, SharedLayoutDocument } from \"~/generated\";\nimport { loaders, forbidWhen, fromGraphQL } from \"~/middleware\";\nimport { ActionArgs, json, redirect } from \"@remix-run/node\";\n\nexport const loader = loaders(\n  fromGraphQL(SharedLayoutDocument, {}),\n  forbidWhen(auth => auth.LOGGED_IN),\n);\n\nexport default function SignUp() {\n  const data = useLoaderData<typeof loader>();\n  return (\n    <Layout user={data?.currentUser}>\n      <Form method=\"post\" className=\"mx-auto max-w-4xl\">\n        <Card as=\"fieldset\">\n          <Legend>sign up</Legend>\n          <div className=\"pb-4 border-b border-primary-300\">\n            <SocialLogin label=\"sign up\" />\n          </div>\n          <Container className=\"mt-4\">\n            <FormRow\n              label={\n                <>\n                  email<Danger as=\"small\">*</Danger>:\n                </>\n              }\n            >\n              <Input type=\"email\" name=\"email\" autoCapitalize=\"false\" required />\n            </FormRow>\n            <FormRow\n              label={\n                <>\n                  username<Danger as=\"small\">*</Danger>:\n                </>\n              }\n            >\n              <Input\n                type=\"text\"\n                name=\"username\"\n                autoCapitalize=\"false\"\n                autoComplete=\"false\"\n                required\n              />\n            </FormRow>\n            <FormRow\n              label={\n                <>\n                  password<Danger as=\"small\">*</Danger>:\n                </>\n              }\n            >\n              <Input type=\"password\" name=\"password\" required minLength={6} />\n            </FormRow>\n            <FormRow\n              label={\n                <>\n                  confirm password<Danger as=\"small\">*</Danger>:\n                </>\n              }\n            >\n              <Input type=\"password\" name=\"confirmPassword\" required minLength={6} />\n            </FormRow>\n            <FormRow label={<span>your name:</span>}>\n              <Input type=\"text\" name=\"name\" />\n            </FormRow>\n            <div>\n              <Button type=\"submit\">register</Button>\n              <FormErrors />\n            </div>\n          </Container>\n        </Card>\n      </Form>\n    </Layout>\n  );\n}\n\nexport const action = async ({ request, context: { graphql } }: ActionArgs) => {\n  const formdata = Object.fromEntries(await request.formData());\n  const params = Object.fromEntries(new URL(request.url).searchParams);\n  const response = await graphql(RegisterDocument, formdata);\n  console.log(response);\n  if (!response.data?.register?.user.id) return json(response);\n  throw redirect(params.redirectTo || '/')\n};\n", "import { ActionArgs, LoaderArgs, redirect } from \"@remix-run/node\";\nimport { GraphQLExecutor } from \"remix.env\";\nimport { SharedLayout_UserFragment } from \"~/generated\";\n\ntype Middleware<A = any, R = any> = (\n  ...args: Array<A>\n) => (args: LoaderArgs, next: () => Promise<void>) => Promise<R>;\n\nconst tap =\n  f =>\n  <T>(x: T): T => (f(x), x);\nconst log = tap(console.log);\n\nexport const loaders =\n  (...fns: Array<ReturnType<Middleware>>) =>\n  (ctx: ActionArgs, next: () => Promise<void>) => {\n    let index = -1;\n    const locals = {};\n    function dispatch(i): Promise<any> {\n      if (i <= index) return Promise.reject(\"next() called more than once in middleware\");\n      index = i;\n      const fn = i === fns.length ? next : fns[i];\n      if (!fn) return Promise.resolve();\n      try {\n        return Promise.resolve(fn(Object.assign(ctx, { locals }), dispatch.bind(null, i + 1)));\n      } catch (err) {\n        return Promise.reject(err);\n      }\n    }\n    return dispatch(0);\n  };\n\nexport const fromGraphQL: Middleware<Parameters<GraphQLExecutor>> =\n  (document, variables) =>\n  async ctx => {\n    console.log('fetching:', document.loc.source.body)\n    const response = await ctx.context.graphql(document, variables);\n    console.log(response)\n    if (response.errors) {\n      if (response.errors[1]) throw Error(response.errors);\n      throw response.errors[0];\n    }\n    ctx.locals.currentUser = response.data.currentUser;\n    return response.data;\n  };\n\nenum AuthRestrict {\n  NEVER = 0,\n  LOGGED_OUT = 1 << 0,\n  LOGGED_IN = 1 << 1,\n  NOT_MOD = 1 << 2,\n  NOT_ADMIN = 1 << 3,\n}\n\nexport const forbidWhen: Middleware =\n  (when: (auth: typeof AuthRestrict) => AuthRestrict) =>\n  async (ctx, next) => {\n    const forbidWhen = when(AuthRestrict);\n    const forbidsLoggedOut = forbidWhen & AuthRestrict.LOGGED_OUT;\n    const forbidsLoggedIn = forbidWhen & AuthRestrict.LOGGED_IN;\n    const forbidsNotMod = forbidWhen & AuthRestrict.NOT_MOD;\n    const forbidsNotAdmin = forbidWhen & AuthRestrict.NOT_ADMIN;\n    await next();\n    if (!(ctx.locals && \"currentUser\" in ctx.locals)) {\n      throw new Error(\"cannot auth without currentUser data in request\");\n    }\n    const currentUser = ctx.locals.currentUser as null | SharedLayout_UserFragment;\n    const currentLocation = new URL(ctx.request.url).pathname;\n    if (currentUser && (forbidsLoggedIn || (forbidsNotAdmin && currentUser.role !== \"ADMIN\"))) {\n      if (!forbidsLoggedIn) console.info(\"auth check failed against user\", currentUser.username);\n      throw redirect(\"/\");\n    } else if (currentUser == null && forbidsLoggedOut) {\n      throw redirect(`/signup?next=${encodeURIComponent(currentLocation)}`);\n    }\n  };\n", "import { Container, Card, Layout } from \"~/components\";\nimport { VerifyEmailDocument } from \"~/generated\";\nimport { LoaderArgs, json } from \"@remix-run/node\";\nimport { useLoaderData } from \"@remix-run/react\";\n\nexport async function loader({ request, context: { graphql } }: LoaderArgs) {\n  const searchParams = Object.fromEntries(new URL(request.url).searchParams);\n  const result = await graphql(VerifyEmailDocument, searchParams);\n  console.log(result)\n  return json({\n    ...result.data?.verifyEmail?.query,\n    message: result.data?.verifyEmail?.success\n      ? \"Thank you for verifying your email address. You may now close this window.\"\n      : \"Incorrect token, please check and try again\",\n  });\n}\n\nexport default function Verify() {\n  const { message } = useLoaderData<typeof loader>();\n\n  return (\n    <Layout>\n      <Card className=\"m-4\">\n        <Container className=\"p-4 items-center\">{message}</Container>\n      </Card>\n    </Layout>\n  );\n}\n", "import React, { useState } from \"react\";\nimport { LoaderArgs, ActionArgs, json } from \"@remix-run/node\";\nimport { Form, useActionData, useSearchParams } from \"@remix-run/react\";\nimport { Button, Card, Container, FormErrors, FormRow, Input, Layout, Legend } from \"~/components\";\nimport { ResetPasswordDocument, SharedLayoutDocument } from \"~/generated\";\n\nexport async function loader({ context: { graphql } }: LoaderArgs) {\n  const { data } = await graphql(SharedLayoutDocument);\n  return data;\n}\n\nexport default function ResetPage() {\n  const [params] = useSearchParams();\n  const actionData = useActionData<typeof action>();\n  const [errors, setErrors] = useState<null | string>(null);\n\n  const userId = params.get(\"userId\");\n  const token = params.get(\"token\");\n\n  return (\n    <Layout forbidWhen={auth => auth.NEVER}>\n      <div className=\"mx-auto max-w-4xl\">\n        {actionData && \"message\" in actionData ? (\n          <Card className=\"bg-red-100 mb-4\">\n            <FormErrors errors={actionData.message} />\n          </Card>\n        ) : null}\n        <Form\n          method=\"post\"\n          onSubmit={ev => {\n            const values = Object.fromEntries(new FormData(ev.currentTarget));\n            if (values.password !== values.confirmPassword) {\n              setErrors(\"passwords must match\");\n              return ev.preventDefault();\n            }\n            setErrors(null);\n          }}\n        >\n          <Card as=\"fieldset\">\n            <Legend>Reset password:</Legend>\n            <Container>\n              <FormRow label=\"Choose a new passphrase:\">\n                <Input name=\"password\" type=\"password\" required autoComplete=\"new-password\" />\n              </FormRow>\n              <FormRow label=\"Confirm passphrase\">\n                <Input\n                  name=\"confirmPassword\"\n                  type=\"password\"\n                  required\n                  autoComplete=\"new-password\"\n                />\n              </FormRow>\n              <FormErrors errors={errors} />\n              <Button variant=\"primary\">Reset passphrase</Button>\n            </Container>\n          </Card>\n          <Input name=\"token\" type=\"hidden\" value={token} />\n          <Input name=\"userId\" type=\"hidden\" value={userId} />\n        </Form>\n      </div>\n    </Layout>\n  );\n}\n/*\n        {!(userId && token) ? (\n          <Card className=\"text-center\">Missing user id and token</Card>\n        ) : (\n        )}\n*/\nexport async function action({ request, context: { graphql } }: ActionArgs) {\n  const values = Object.fromEntries(await request.formData());\n  const result = await graphql(ResetPasswordDocument, values);\n  if (result.errors) {\n    console.log(result.errors);\n    return json({ message: \"An error occurred\" });\n  }\n\n  if (!result.data?.resetPassword?.success) {\n    return json({ message: \"Incorrect token, please check and try again\" });\n  }\n  return json({ message: \"Your password was reset; you can go and log in now\" });\n}\n", "export default {'entry':{'module':'/build/entry.client-FSYIO2ZK.js','imports':['/build/_shared/chunk-ZWGWGGVF.js','/build/_shared/chunk-GIAAE3CH.js','/build/_shared/chunk-XU7DNSPJ.js','/build/_shared/chunk-3ORMOPIX.js','/build/_shared/chunk-QWDH2ZI7.js','/build/_shared/chunk-UWV35TSL.js','/build/_shared/chunk-BOXFZXVX.js','/build/_shared/chunk-PNG5AS42.js']},'routes':{'root':{'id':'root','parentId':undefined,'path':'','index':undefined,'caseSensitive':undefined,'module':'/build/root-STEEVD3P.js','imports':undefined,'hasAction':false,'hasLoader':false,'hasCatchBoundary':false,'hasErrorBoundary':true},'routes/_index':{'id':'routes/_index','parentId':'root','path':undefined,'index':true,'caseSensitive':undefined,'module':'/build/routes/_index-ZEKG4MR5.js','imports':['/build/_shared/chunk-G7CHZRZX.js','/build/_shared/chunk-FRWDQBRX.js'],'hasAction':true,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/forgot':{'id':'routes/forgot','parentId':'root','path':'forgot','index':undefined,'caseSensitive':undefined,'module':'/build/routes/forgot-YZSRDMTT.js','imports':['/build/_shared/chunk-FRWDQBRX.js'],'hasAction':true,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/post':{'id':'routes/post','parentId':'root','path':'post','index':undefined,'caseSensitive':undefined,'module':'/build/routes/post-IZ3XBZG5.js','imports':undefined,'hasAction':false,'hasLoader':false,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/reset':{'id':'routes/reset','parentId':'root','path':'reset','index':undefined,'caseSensitive':undefined,'module':'/build/routes/reset-OS2OHGQM.js','imports':['/build/_shared/chunk-G7CHZRZX.js','/build/_shared/chunk-FRWDQBRX.js'],'hasAction':true,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/settings':{'id':'routes/settings','parentId':'root','path':'settings','index':undefined,'caseSensitive':undefined,'module':'/build/routes/settings-67Y6STLL.js','imports':['/build/_shared/chunk-G7CHZRZX.js','/build/_shared/chunk-FRWDQBRX.js'],'hasAction':true,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/signin':{'id':'routes/signin','parentId':'root','path':'signin','index':undefined,'caseSensitive':undefined,'module':'/build/routes/signin-NSHBLDBO.js','imports':['/build/_shared/chunk-G7CHZRZX.js','/build/_shared/chunk-FRWDQBRX.js'],'hasAction':true,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/signup':{'id':'routes/signup','parentId':'root','path':'signup','index':undefined,'caseSensitive':undefined,'module':'/build/routes/signup-6QLPT3GO.js','imports':['/build/_shared/chunk-G7CHZRZX.js','/build/_shared/chunk-FRWDQBRX.js'],'hasAction':true,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/verify':{'id':'routes/verify','parentId':'root','path':'verify','index':undefined,'caseSensitive':undefined,'module':'/build/routes/verify-OGKI35GE.js','imports':['/build/_shared/chunk-G7CHZRZX.js','/build/_shared/chunk-FRWDQBRX.js'],'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false}},'version':'d3e24f30','hmr':{'runtime':'/build/_shared/chunk-QWDH2ZI7.js','timestamp':1690402270480},'url':'/build/manifest-D3E24F30.js'};", "\nimport * as entryServer from \"/home/dan/build/graphile5-remix/app/entry.server.tsx\";\nimport * as route0 from \"./root.tsx\";\nimport * as route1 from \"./routes/settings.tsx\";\nimport * as route2 from \"./routes/_index.tsx\";\nimport * as route3 from \"./routes/forgot.tsx\";\nimport * as route4 from \"./routes/signin.tsx\";\nimport * as route5 from \"./routes/signup.tsx\";\nimport * as route6 from \"./routes/verify.tsx\";\nimport * as route7 from \"./routes/reset.tsx\";\nimport * as route8 from \"./routes/post.tsx\";\n  export { default as assets } from \"@remix-run/dev/assets-manifest\";\n  export const assetsBuildDirectory = \"public/build\";\n  export const future = {\"v2_dev\":true,\"unstable_postcss\":false,\"unstable_tailwind\":false,\"v2_errorBoundary\":true,\"v2_headers\":true,\"v2_meta\":true,\"v2_normalizeFormMethod\":true,\"v2_routeConvention\":true};\n  export const publicPath = \"/build/\";\n  export const entry = { module: entryServer };\n  export const routes = {\n    \"root\": {\n      id: \"root\",\n      parentId: undefined,\n      path: \"\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route0\n    },\n  \"routes/settings\": {\n      id: \"routes/settings\",\n      parentId: \"root\",\n      path: \"settings\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route1\n    },\n  \"routes/_index\": {\n      id: \"routes/_index\",\n      parentId: \"root\",\n      path: undefined,\n      index: true,\n      caseSensitive: undefined,\n      module: route2\n    },\n  \"routes/forgot\": {\n      id: \"routes/forgot\",\n      parentId: \"root\",\n      path: \"forgot\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route3\n    },\n  \"routes/signin\": {\n      id: \"routes/signin\",\n      parentId: \"root\",\n      path: \"signin\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route4\n    },\n  \"routes/signup\": {\n      id: \"routes/signup\",\n      parentId: \"root\",\n      path: \"signup\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route5\n    },\n  \"routes/verify\": {\n      id: \"routes/verify\",\n      parentId: \"root\",\n      path: \"verify\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route6\n    },\n  \"routes/reset\": {\n      id: \"routes/reset\",\n      parentId: \"root\",\n      path: \"reset\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route7\n    },\n  \"routes/post\": {\n      id: \"routes/post\",\n      parentId: \"root\",\n      path: \"post\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route8\n    }\n  };"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA;AAAA;AAAA;AAAA;AAMA,yBAA4B,wBAG5B,cAAyB,4BACzB,eAA4B,6BAC5B,eAAkB,2BAClB,gBAAuC,6BAmCjC,2DAjCA,cAAc;AAEL,SAAR,cACL,SACA,oBACA,iBACA,cACA,aACA;AACA,aAAO,aAAAA,SAAM,QAAQ,QAAQ,IAAI,YAAY,CAAC,IAC1C;AAAA,IACE;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF,IACA;AAAA,IACE;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACN;AAEA,SAAS,iBACP,SACA,oBACA,iBACA,cACA;AACA,SAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,QAAI,gBAAgB,IACd,EAAE,MAAM,MAAM,QAAI;AAAA,MACtB;AAAA,QAAC;AAAA;AAAA,UACC,SAAS;AAAA,UACT,KAAK,QAAQ;AAAA,UACb,YAAY;AAAA;AAAA,QAHd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAIA;AAAA,MACA;AAAA,QACE,aAAa;AACX,0BAAgB;AAChB,cAAM,OAAO,IAAI,+BAAY;AAE7B,0BAAgB,IAAI,gBAAgB,WAAW,GAE/C;AAAA,YACE,IAAI,qBAAS,MAAM;AAAA,cACjB,SAAS;AAAA,cACT,QAAQ;AAAA,YACV,CAAC;AAAA,UACH,GAEA,KAAK,IAAI;AAAA,QACX;AAAA,QACA,aAAa,OAAgB;AAC3B,iBAAO,KAAK;AAAA,QACd;AAAA,QACA,QAAQ,OAAgB;AACtB,+BAAqB,KAIjB,iBACF,QAAQ,MAAM,KAAK;AAAA,QAEvB;AAAA,MACF;AAAA,IACF;AAEA,eAAW,OAAO,WAAW;AAAA,EAC/B,CAAC;AACH;AAEA,SAAS,qBACP,SACA,oBACA,iBACA,cACA;AACA,SAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,QAAI,gBAAgB,IACd,EAAE,MAAM,MAAM,QAAI;AAAA,MACtB;AAAA,QAAC;AAAA;AAAA,UACC,SAAS;AAAA,UACT,KAAK,QAAQ;AAAA,UACb,YAAY;AAAA;AAAA,QAHd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAIA;AAAA,MACA;AAAA,QACE,eAAe;AACb,0BAAgB;AAChB,cAAM,OAAO,IAAI,+BAAY;AAE7B,0BAAgB,IAAI,gBAAgB,WAAW,GAE/C;AAAA,YACE,IAAI,qBAAS,MAAM;AAAA,cACjB,SAAS;AAAA,cACT,QAAQ;AAAA,YACV,CAAC;AAAA,UACH,GAEA,KAAK,IAAI;AAAA,QACX;AAAA,QACA,aAAa,OAAgB;AAC3B,iBAAO,KAAK;AAAA,QACd;AAAA,QACA,QAAQ,OAAgB;AACtB,+BAAqB,KAIjB,iBACF,QAAQ,MAAM,KAAK;AAAA,QAEvB;AAAA,MACF;AAAA,IACF;AAEA,eAAW,OAAO,WAAW;AAAA,EAC/B,CAAC;AACH;;;ACtIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAGA,IAAAC,gBAQA;;;;;;AAEA,qCAA8B,oCAsDtBC,0BAAA,kCApDK,OAAwB,MAAM;AAAA,EAC3C,EAAE,MAAM,YAAY,SAAS,qCAAqC;AAAA,EAClE,EAAE,SAAS,QAAQ;AAAA,EACnB,EAAE,WAAW,oBAAoB,SAAS,KAAK;AAAC,GAEnC,QAAuB,MAC3B;AAAA;AAAA,EAEP,GAAI,qBAAgB,CAAC,EAAE,KAAK,cAAc,MAAM,mBAAc,CAAC,IAAI,CAAC;AAAA,EACpE,EAAE,KAAK,cAAc,MAAM,iBAAY;AAAC,GAIpC,aAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmCJ,SAAR,MAAuB;AAC5B,SACE,oDAAC,UAAK,MAAK,MACT;AAAA,wDAAC,UACC;AAAA,0DAAC,wBAAD;AAAA;AAAA;AAAA;AAAA,aAAM;AAAA,MACN,oDAAC,YAAO,yBAAyB,EAAE,QAAQ,WAAW,KAAtD;AAAA;AAAA;AAAA;AAAA,aAAyD;AAAA,MACzD,oDAAC,yBAAD;AAAA;AAAA;AAAA;AAAA,aAAO;AAAA,SAHT;AAAA;AAAA;AAAA;AAAA,WAIA;AAAA,IACA,oDAAC,UAAK,WAAU,iEACd;AAAA,0DAAC,0BAAD;AAAA;AAAA;AAAA;AAAA,aAAQ;AAAA,MACR,oDAAC,qCAAD;AAAA;AAAA;AAAA;AAAA,aAAmB;AAAA,MACnB,oDAAC,2BAAD;AAAA;AAAA;AAAA;AAAA,aAAS;AAAA,MAET,wFACI;AAAA,4DAAC,8BAAD;AAAA;AAAA;AAAA;AAAA,eAAY;AAAA,QACZ,oDAAC,kDAAD;AAAA;AAAA;AAAA;AAAA,eAAe;AAAA,WAFnB;AAAA;AAAA;AAAA;AAAA,aAGE;AAAA,SARJ;AAAA;AAAA;AAAA;AAAA,WAUA;AAAA,OAhBF;AAAA;AAAA;AAAA;AAAA,SAiBA;AAEJ;AAEO,IAAM,gBAAwC,CAAC,EAAE,MAAM,OAC5D,QAAQ,MAAM,EAAE,MAAM,CAAC,GAErB,oDAAC,UAAK,MAAK,MACT;AAAA,sDAAC,UACC;AAAA,wDAAC,WAAM,sBAAP;AAAA;AAAA;AAAA;AAAA,WAAa;AAAA,IACb,oDAAC,wBAAD;AAAA;AAAA;AAAA;AAAA,WAAM;AAAA,IACN,oDAAC,yBAAD;AAAA;AAAA;AAAA;AAAA,WAAO;AAAA,OAHT;AAAA;AAAA;AAAA;AAAA,SAIA;AAAA,EACA,oDAAC,UACC;AAAA,wDAAC,2BAAD;AAAA;AAAA;AAAA;AAAA,WAAS;AAAA,IAAE;AAAA,KAEV,+BAAO,aAAW,+BAAO;AAAA,OAH5B;AAAA;AAAA;AAAA;AAAA,SAIA;AAAA,KAVF;AAAA;AAAA;AAAA;AAAA,OAWA;;;ACpGJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAAC,gBAAgC;;;ACEhC,yBAAgB,iCA+uDH,kCAAkC,mBAAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GASlC,wBAAwB,mBAAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAiBxB,+BAA+B,mBAAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAU/B,gCAAgC,mBAAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAMzC;AAAA,GAES,mBAAmB,mBAAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAc5B;AAAA,GAES,yBAAyB,mBAAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAOzB,iCAAiC,mBAAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAUjC,qBAAqB,mBAAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAUrB,6BAA6B,mBAAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAkB7B,sBAAsB,mBAAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAc/B;AAAA,GAES,yBAAyB,mBAAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAOzB,sBAAsB,mBAAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAS/B;AAAA,IACA;AAAA,GAES,gBAAgB,mBAAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAWhB,iBAAiB,mBAAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAOjB,2BAA2B,mBAAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAe3B,mBAAmB,mBAAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAWnB,iCAAiC,mBAAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAUjC,kCAAkC,mBAAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAUlC,wBAAwB,mBAAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAOxB,0BAA0B,mBAAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAwBnC;AAAA,GAES,uBAAuB,mBAAAA;AAAA;AAAA;AAAA;AAAA,IAIhC;AAAA,GAES,mCAAmC,mBAAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAkBnC,qBAAqB,mBAAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAYrB,sBAAsB,mBAAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAS/B;AAAA;;;AC3gEJ,IAAAC,gBAAyD;;;ACCzD,8BAA4B,6BAC5BC,gBAAgC;AAEhC,eAAsB,YAAY;AAChC,MAAM,eAAW,qCAAY;AAC7B,SAAO,WAAkB;AACvB,uCAAgB,MAAM;AACpB,eAAS,GAAG;AAAA,IACd,CAAC;AAAA,EACH;AACF;AAEO,SAAS,YAAe,OAAkD;AAC/E,SAAK,QACE,MAAM,QAAQ,KAAK,IAAI,QAAQ,CAAC,KAAK,IADzB,CAAC;AAEtB;;;ACZA,IAAAC,gBAA+E,6BAC/E,8BAAsD,iCAkBxCC,0BAAA,kCAhBR,YAAuC,SAAmB,OAAO;AACrE,SAAO;AAAA,IACL,MAAM,WAAW,qCAAqC;AAAA,IACtD;AAAA,EACF;AACF;AAEA,SAAS,IAAI,EAAE,YAAY,GAAsD;AAC/E,MAAM,SAAS,UAAU,GACnB,eAAW,2BAAY;AAC7B,SACE,oDAAC,YACC,8DAAC,SAAI,WAAU,sGACb,8DAAC,QAAG,WAAU,2CACZ;AAAA,wDAAC,SACC,8DAAC,QACC,8DAAC,yBAAQ,IAAG,KAAI,WAAW,WAAW,oBAAtC;AAAA;AAAA;AAAA;AAAA,WAEA,KAHF;AAAA;AAAA;AAAA;AAAA,WAIA,KALF;AAAA;AAAA;AAAA;AAAA,WAMA;AAAA,IACA,oDAAC,SAAI,WAAU,uBACZ,wBACC,wFACE;AAAA,0DAAC,SAAI,WAAU,oCAAmC;AAAA;AAAA,QACnC,oDAAC,UAAK,WAAU,aAAa,sBAAY,YAAzC;AAAA;AAAA;AAAA;AAAA,eAAkD;AAAA,WADjE;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,MACA,oDAAC,QACC,8DAAC,yBAAQ,IAAG,aAAY,WAAW,WAAW,wBAA9C;AAAA;AAAA;AAAA;AAAA,aAEA,KAHF;AAAA;AAAA;AAAA;AAAA,aAIA;AAAA,MACA,oDAAC,QACC;AAAA,QAAC;AAAA;AAAA,UACC,MAAK;AAAA,UACL,WAAW,uCAAY,CAAC;AAAA,UACxB,SAAS,MAAM;AACb,YAAK,OAAO;AAAA,UACd;AAAA,UACD;AAAA;AAAA,QAND;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQA,KATF;AAAA;AAAA;AAAA;AAAA,aAUA;AAAA,SAnBF;AAAA;AAAA;AAAA;AAAA,WAoBA,IAEA,wFACE;AAAA,0DAAC,QACC,8DAAC,yBAAQ,IAAG,WAAU,WAAW,UAAU,EAAE,UAAU,GAAK,CAAC,GAAG,iCAAhE;AAAA;AAAA;AAAA;AAAA,aAEA,KAHF;AAAA;AAAA;AAAA;AAAA,aAIA;AAAA,MACA,oDAAC,QACC,8DAAC,yBAAQ,IAAG,WAAU,WAAW,WAAW,uBAA5C;AAAA;AAAA;AAAA;AAAA,aAEA,KAHF;AAAA;AAAA;AAAA;AAAA,aAIA;AAAA,SAVF;AAAA;AAAA;AAAA;AAAA,WAWA,KAnCJ;AAAA;AAAA;AAAA;AAAA,WAqCA;AAAA,OA7CF;AAAA;AAAA;AAAA;AAAA,SA8CA,KA/CF;AAAA;AAAA;AAAA;AAAA,SAgDA,KAjDF;AAAA;AAAA;AAAA;AAAA,SAkDA;AAEJ;AAEA,IAAK,eAAL,kBAAKC,mBACHA,4BAAA,QAAQ,KAAR,SACAA,4BAAA,aAAa,KAAb,cACAA,4BAAA,YAAY,KAAZ,aACAA,4BAAA,UAAU,KAAV,WACAA,4BAAA,YAAY,KAAZ,aALGA,gBAAA;AAQE,SAAS,OAAO;AAAA,EACrB;AAAA,EACA,YAAY,OAAO,UAAQ,KAAK;AAClC,GAGG;AACD,MAAM,eAAW,2BAAY,GACvB,eAAW,2BAAY,GACvB,WAAO,6BAAc;AAC3B,MAAI,EAAE,QAAQ,iBAAiB;AAAO,UAAM,IAAI,MAAM,oBAAoB;AAC1E,MAAM,cAAc,KAAK,aAEnBC,cAAa,KAAK,YAAY,GAC9B,mBAAmBA,cAAa,oBAChC,kBAAkBA,cAAa,mBAC/B,gBAAgBA,cAAa,iBAC7B,kBAAkBA,cAAa;AACrC,SAAI,gBAAgB,mBAAoB,mBAAmB,YAAY,SAAS,YAC9E,SAAS,KAAK,EAAE,SAAS,GAAK,CAAC,GACxB,QACE,eAAe,QAAQ,oBAChC,SAAS,gBAAgB,mBAAmB,SAAS,QAAQ,KAAK,EAAE,SAAS,GAAK,CAAC,GAC5E,QAIP,wFACE;AAAA,wDAAC,OAAI,eAAL;AAAA;AAAA;AAAA;AAAA,WAA+B;AAAA,IAC/B,oDAACC,gBAAA,EAAe,YAAhB;AAAA;AAAA;AAAA;AAAA,WAAyB;AAAA,OAF3B;AAAA;AAAA;AAAA;AAAA,SAGA;AAEJ;AAEO,SAASA,eAAc,EAAE,SAAS,GAAkC;AACzE,SACE;AAAA,IAAC,4BAAAC;AAAA,IAAA;AAAA,MACC,gBAAgB,CAAC,EAAE,OAAO,mBAAmB,MAC3C,oDAAC,SAAI,WAAU,SACb;AAAA,4DAAC,UAAK,4CAAN;AAAA;AAAA;AAAA;AAAA,eAAkC;AAAA,QAClC,oDAAC,SAAK,eAAK,UAAU,OAAO,MAAM,CAAC,KAAnC;AAAA;AAAA;AAAA;AAAA,eAAqC;AAAA,QACrC,oDAAC,UAAO,SAAS,oBAAoB,qBAArC;AAAA;AAAA;AAAA;AAAA,eAA0C;AAAA,WAH5C;AAAA;AAAA;AAAA;AAAA,aAIA;AAAA,MAGD;AAAA;AAAA,IATH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA;AAEJ;;;AF9GI,IAAAC,0BAAA;AAXG,SAAS,KAAQ;AAAA,EACtB;AAAA,EACA;AAAA,EACA,IAAI,KAAK;AAAA,EACT,GAAG;AACL,GAIuC;AACrC,SACE;AAAA,IAAC;AAAA;AAAA,MACC,WAAW;AAAA,QACT;AAAA,QACA;AAAA,MACF;AAAA,MACC,GAAG;AAAA,MAEH;AAAA;AAAA,IAPH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA;AAEJ;AAEO,SAAS,UAAU;AAAA,EACxB;AAAA,EACA;AAAA,EACA,IAAI,KAAK;AAAA,EACT,GAAG;AACL,GAIG;AACD,SACE,oDAAC,MAAG,WAAW,KAAK,uBAAuB,SAAS,GAAI,GAAG,OACxD,YADH;AAAA;AAAA;AAAA;AAAA,SAEA;AAEJ;AAEO,SAAS,OAAO;AAAA,EACrB;AAAA,EACA,IAAI,KAAK;AAAA,EACT;AAAA,EACA,GAAG;AACL,GAIG;AACD,SACE,oDAAC,MAAG,WAAW,KAAK,gBAAgB,SAAS,GAAI,GAAG,OACjD,YADH;AAAA;AAAA;AAAA;AAAA,SAEA;AAEJ;AAEO,SAAS,OAAO;AAAA,EACrB;AAAA,EACA,UAAU;AAAA,EACV;AAAA,EACA,GAAG;AACL,GAAmG;AACjG,SACE;AAAA,IAAC;AAAA;AAAA,MACE,GAAG;AAAA,MACJ,WAAW;AAAA,QACP,YAAY,YAAY,yDACxB,YAAY,WAAW,mEACvB;AAAA,QACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAYE,QAAQ,QAAQ,GAAG;AAAA,QACrB;AAAA,MACF;AAAA,MAEC;AAAA;AAAA,IAtBH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAuBA;AAEJ;AAEO,SAAS,MAAM;AAAA,EACpB;AAAA,EACA,GAAG;AACL,GAI4D;AAC1D,MAAM,gBAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAoBpB,QAAQ,QAAQ,GAAG;AACrB,SAAO,MAAM,SACX,aACA,oDAAC,cAAU,GAAG,OAAO,WAAW,KAAK,iBAAiB,eAAe,SAAS,GAC3E,gBAAM,SADT;AAAA;AAAA;AAAA;AAAA,SAEA;AAAA;AAAA,IAGA,oDAAC,WAAO,GAAG,OAAO,WAAW,KAAK,oBAAoB,eAAe,SAAS,KAA9E;AAAA;AAAA;AAAA;AAAA,WAAiF;AAAA;AAErF;AAEO,SAAS,OAAU;AAAA,EACxB,YAAY;AAAA,EACZ,IAAI,KAAK;AAAA,EACT,GAAG;AACL,GAEyF;AACvF,SACE;AAAA,IAAC;AAAA;AAAA,MACC,WAAW;AAAA,QACT;AAAA;AAAA,QAEA;AAAA;AAAA,QAEA;AAAA,QACA;AAAA,MACF;AAAA,MACC,GAAG;AAAA,MAEH,gBAAM;AAAA;AAAA,IAXT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA;AAEJ;AAEA,IAAM,UAAU,cAAAC,QAAM,cAMpB,MAAS;AAkEJ,SAAS,WAAW,OAAmE;AAC5F,MAAI,CAAC,MAAM;AAAQ,WAAO;AAC1B,MAAM,OAAO,YAAY,MAAM,MAAM;AACrC,SACE,oDAAC,aACE,eAAK,IAAI,SACR,oDAAC,UAAO,IAAG,OACR,iBAAO,OAAQ,WAAW,MAAM,IAAI,WADjB,KAAtB;AAAA;AAAA;AAAA;AAAA,SAEA,CACD,KALH;AAAA;AAAA;AAAA;AAAA,SAMA;AAEJ;AAEO,SAAS,QAAQ;AAAA,EACtB;AAAA,EACA;AAAA,EACA;AACF,GAIG;AACD,SACE,oDAAC,WAAM,WAAW,KAAK,6CAA6C,SAAS,GAC1E;AAAA,aAAS,oDAAC,UAAK,WAAU,aAAa,mBAA7B;AAAA;AAAA;AAAA;AAAA,WAAmC;AAAA,IAC7C,oDAAC,UAAK,WAAW,KAAK,SAAS,WAAW,GAAI,YAA9C;AAAA;AAAA;AAAA;AAAA,WAAuD;AAAA,OAFzD;AAAA;AAAA;AAAA;AAAA,SAGA;AAEJ;AAQO,SAAS,QAAQ,MAA0B;AAChD,MAAM,UAAyB,CAAC;AAEhC,WAAW,OAAO;AAChB,QAAK;AAEL,UAAI,OAAO,OAAQ,YAAY,OAAO,OAAQ;AAC5C,gBAAQ,KAAK,IAAI,SAAS,CAAC;AAAA,eAClB,MAAM,QAAQ,GAAG,KAAK,IAAI,QAAQ;AAC3C,YAAM,QAAQ,KAAK,GAAG,GAAG;AAEzB,QAAI,SACF,QAAQ,KAAK,KAAK;AAAA,iBAEX,OAAO,OAAQ;AACxB,iBAAW,OAAO;AAChB,WAAI,CAAC,GAAE,eAAe,KAAK,KAAK,GAAG,KAAK,IAAI,GAAG,KAC7C,QAAQ,KAAK,GAAG;AAAA;AAMxB,SAAO,QAAQ,KAAK,GAAG;AACzB;AAMA,IAAM,sBAAsB,CAAC,QAAQ;AAC9B,SAAS,YAAY;AAAA,EAC1B;AAAA,EACA;AACF,GAGG;AACD,SAAI,oBAAoB,SAAS,IAAU,OAEzC,oDAAC,SAAI,WAAU,eACZ,8BAAoB,IAAI,aACvB,oDAAC,UAAO,SAAQ,WACd;AAAA,IAAC;AAAA;AAAA,MACC,MAAM,SAAS,QAAQ,YAAY,IACjC,aAAa,eAAe,mBAAmB,UAAU,MAAM;AAAA,MAGhE,iBAAO,SAAU,aAAa,MAAM,OAAO,IAAI,GAAG,cAAc;AAAA;AAAA,IALnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,KAP6B,SAA/B;AAAA;AAAA;AAAA;AAAA,SAQA,CACD,KAXH;AAAA;AAAA;AAAA;AAAA,SAYA;AAEJ;;;AFtTA,IAAAC,eAAuD,4BACvDC,gBAAiF,6BAYzEC,0BAAA;AAVR,eAAsB,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAe;AACjE,MAAM,EAAE,KAAK,IAAI,MAAM,QAAQ,yBAAyB,CAAC,CAAC;AAC1D,OAAI,6BAAM,gBAAe;AAAM,cAAM,uBAAS,8BAA8B;AAC5E,aAAO,mBAAK,IAAI;AAClB;AAEe,SAAR,eAAgC;AACrC,SACE,oDAAC,UACC,8DAAC,aAAU,WAAU,0BACnB;AAAA,wDAAC,iBAAD;AAAA;AAAA;AAAA;AAAA,WAAa;AAAA,IACb,oDAAC,sBAAD;AAAA;AAAA;AAAA;AAAA,WAAkB;AAAA,IAClB,oDAAC,mBAAD;AAAA;AAAA;AAAA;AAAA,WAAe;AAAA,IACf,oDAAC,oBAAD;AAAA;AAAA;AAAA;AAAA,WAAgB;AAAA,IAChB,oDAAC,mBAAD;AAAA;AAAA;AAAA;AAAA,WAAe;AAAA,OALjB;AAAA;AAAA;AAAA;AAAA,SAMA,KAPF;AAAA;AAAA;AAAA;AAAA,SAQA;AAEJ;AAEA,SAAS,cAAc;AAtCvB;AAwCE,MAAM,WAAO,6BAA6B;AAC1C,SACE,oDAAC,sBAAK,QAAO,QAAO,QAAO,aACzB;AAAA,wDAAC,WAAM,MAAK,UAAS,MAAK,MAAK,QAAO,kCAAM,gBAAN,mBAAmB,MAAzD;AAAA;AAAA;AAAA;AAAA,WAA6D;AAAA,IAC7D,oDAAC,QAAK,IAAG,YACP;AAAA,0DAAC,UAAO,gCAAR;AAAA;AAAA;AAAA;AAAA,aAAwB;AAAA,MACxB,oDAAC,aACC;AAAA,4DAAC,WAAQ,OAAM,aACb;AAAA,UAAC;AAAA;AAAA,YACC,MAAK;AAAA,YACL,MAAK;AAAA,YACL,eAAc,kCAAM,gBAAN,mBAAmB;AAAA,YACjC,aAAY;AAAA,YACZ,UAAQ;AAAA;AAAA,UALV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAMA,KAPF;AAAA;AAAA;AAAA;AAAA,eAQA;AAAA,QACA,oDAAC,WAAQ,OAAM,SACb;AAAA,UAAC;AAAA;AAAA,YACC,MAAK;AAAA,YACL,MAAK;AAAA,YACL,gBAAc,kCAAM,gBAAN,mBAAmB,SAAQ;AAAA,YACzC,aAAY;AAAA;AAAA,UAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAKA,KANF;AAAA;AAAA;AAAA;AAAA,eAOA;AAAA,QACA,oDAAC,SACC,8DAAC,UAAO,MAAK,UAAS,MAAK,QAAO,OAAM,iBAAgB,sBAAxD;AAAA;AAAA;AAAA;AAAA,eAEA,KAHF;AAAA;AAAA;AAAA;AAAA,eAIA;AAAA,WAtBF;AAAA;AAAA;AAAA;AAAA,aAuBA;AAAA,MACA,oDAAC,gBAAD;AAAA;AAAA;AAAA;AAAA,aAAY;AAAA,SA1Bd;AAAA;AAAA;AAAA;AAAA,WA2BA;AAAA,OA7BF;AAAA;AAAA;AAAA;AAAA,SA8BA;AAEJ;AAEA,SAAS,mBAAmB;AA5E5B;AA8EE,MAAM,WAAO,6BAA6B,GACpC,eAAW,6BAA6B;AAC9C,SACE,oDAAC,sBAAK,QAAO,QAAO,QAAO,aACzB,8DAAC,QAAK,IAAG,YACP;AAAA,wDAAC,UAAO,iCAAR;AAAA;AAAA;AAAA;AAAA,WAAyB;AAAA,IACzB,oDAAC,aACC;AAAA;AAAA,QAAC;AAAA;AAAA,UACC,OAAO,oDAAC,UAAK,6BAAN;AAAA;AAAA;AAAA;AAAA,iBAAmB;AAAA,UAC1B,YAAW,kCAAM,gBAAN,WAAmB,cAAc,KAAK;AAAA,UAEjD;AAAA,YAAC;AAAA;AAAA,cACC,MAAK;AAAA,cACL,MAAK;AAAA,cACL,YAAU,kCAAM,gBAAN,mBAAmB,gBAAe;AAAA,cAC5C,WAAW;AAAA;AAAA,YAJb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAKA;AAAA;AAAA,QATF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAUA;AAAA,MACA,oDAAC,WAAQ,OAAO,oDAAC,UAAK,6BAAN;AAAA;AAAA;AAAA;AAAA,aAAmB,GACjC,8DAAC,SAAM,MAAK,YAAW,MAAK,eAAc,UAAQ,IAAC,WAAW,KAA9D;AAAA;AAAA;AAAA;AAAA,aAAiE,KADnE;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,MACA,oDAAC,WAAQ,OAAO,oDAAC,UAAK,iCAAN;AAAA;AAAA;AAAA;AAAA,aAAuB,GACrC,8DAAC,SAAM,MAAK,YAAW,MAAK,mBAAkB,UAAQ,IAAC,WAAW,KAAlE;AAAA;AAAA;AAAA;AAAA,aAAqE,KADvE;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,MACA,oDAAC,SACC,8DAAC,UAAO,MAAK,UAAS,MAAK,QAAO,OAAM,kBAAiB,+BAAzD;AAAA;AAAA;AAAA;AAAA,aAEA,KAHF;AAAA;AAAA;AAAA;AAAA,aAIA;AAAA,SAtBF;AAAA;AAAA;AAAA;AAAA,WAuBA;AAAA,IACA,oDAAC,cAAW,QAAQ,qCAAU,UAA9B;AAAA;AAAA;AAAA;AAAA,WAAsC;AAAA,OA1BxC;AAAA;AAAA;AAAA;AAAA,SA2BA,KA5BF;AAAA;AAAA;AAAA;AAAA,SA6BA;AAEJ;AAEA,SAAS,gBAAgB;AAlHzB;AAmHE,MAAM,WAAO,6BAA6B;AAC1C,SACE,oDAAC,QAAK,IAAG,YACP;AAAA,wDAAC,UAAO,8BAAR;AAAA;AAAA;AAAA;AAAA,WAAsB;AAAA,IACtB,oDAAC,aACC;AAAA,0DAAC,SACC;AAAA,4DAAC,aACE,6CAAM,gBAAN,mBAAmB,WAAW,MAAM,IAAI,WAAM;AA1H3D,cAAAC;AA2Hc;AAAA,YAAC;AAAA;AAAA,cAEC;AAAA,cACA,kBAAgBA,MAAA,6BAAM,gBAAN,gBAAAA,IAAmB,WAAW,MAAM,UAAS;AAAA;AAAA,YAFxD,MAAM;AAAA,YADb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAIA;AAAA,cANJ;AAAA;AAAA;AAAA;AAAA,eAQA;AAAA,QACA;AAAA,UAAC;AAAA;AAAA,YACC,QACE,qBAAM,gBAAe,qBAAM,YAAY,cACnC,OACA;AAAA;AAAA,UAJR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAMA;AAAA,WAhBF;AAAA;AAAA;AAAA;AAAA,aAiBA;AAAA,MACA,oDAAC,kBAAD;AAAA;AAAA;AAAA;AAAA,aAAc;AAAA,SAnBhB;AAAA;AAAA;AAAA;AAAA,WAoBA;AAAA,OAtBF;AAAA;AAAA;AAAA;AAAA,SAuBA;AAEJ;AAEA,SAAS,MAAM;AAAA,EACb;AAAA,EACA;AACF,GAGG;AACD,MAAM,YAAY,CAAC,MAAM,aAAa;AACtC,SACE,oDAAC,QAAG,WAAU,iCACZ;AAAA,wDAAC,SACE;AAAA,sBAAM,MAAM;AAAA,MACb,oDAAC,SAAI,WAAU,uBACb;AAAA;AAAA,UAAC;AAAA;AAAA,YACC,OACE,MAAM,aACF,aACA;AAAA,YAGL,gBAAM,aAAa,YAAO,oDAAC,UAAO,IAAG,SAAQ,4BAAnB;AAAA;AAAA;AAAA;AAAA,mBAA+B;AAAA;AAAA,UAP5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAQA;AAAA,QAAO;AAAA,QACA,IAAI,KAAK,KAAK,MAAM,MAAM,SAAS,CAAC,EAAE,eAAe;AAAA,WAV9D;AAAA;AAAA;AAAA;AAAA,aAWA;AAAA,SAbF;AAAA;AAAA;AAAA;AAAA,WAcA;AAAA,IACA,oDAAC,sBACC;AAAA,0DAAC,WAAM,MAAK,UAAS,MAAK,WAAU,OAAO,MAAM,MAAjD;AAAA;AAAA;AAAA;AAAA,aAAqD;AAAA,MACpD,MAAM,aAAa,oDAAC,UAA6B,uBAApB,qBAAV;AAAA;AAAA;AAAA;AAAA,aAAqC;AAAA,MACxD,aACC;AAAA,QAAC;AAAA;AAAA,UACC,MAAK;AAAA,UACL,MAAK;AAAA,UACL,SAAS,MAAM,YAAY,EAAE,WAAW,EAAE,SAAS,MAAM,GAAG,EAAE,CAAC;AAAA,UAChE;AAAA;AAAA,QAJD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMA;AAAA,MAED,CAAC,MAAM,cACN;AAAA,QAAC;AAAA;AAAA,UACC,SAAQ;AAAA,UACR,SAAS,MAAM,wBAAwB,EAAE,WAAW,EAAE,SAAS,MAAM,GAAG,EAAE,CAAC;AAAA,UAC5E;AAAA;AAAA,QAHD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAKA;AAAA,MAED,MAAM,cAAc,CAAC,MAAM,aAC1B,oDAAC,UAAO,SAAS,MAAM,iBAAiB,EAAE,WAAW,EAAE,SAAS,MAAM,GAAG,EAAE,CAAC,GAAG,4BAA/E;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,SAvBJ;AAAA;AAAA;AAAA;AAAA,WAyBA;AAAA,OAzCF;AAAA;AAAA;AAAA;AAAA,SA0CA;AAEJ;AAEA,SAAS,eAAe;AAEtB,MAAM,CAAC,UAAU,WAAW,QAAI,wBAAkB,EAAK;AACvD,SAAK,WAUH;AAAA,IAAC;AAAA;AAAA,MACC,UAAU,OAAO,EAAE,OAAO,MAAM;AAAA,MAEhC;AAAA,MAEA;AAAA,4DAAC,WAAQ,OAAM,cACb,8DAAC,SAAM,MAAK,SAAQ,MAAK,SAAQ,UAAQ,MAAzC;AAAA;AAAA;AAAA;AAAA,eAA0C,KAD5C;AAAA;AAAA;AAAA;AAAA,eAEA;AAAA,QACA,oDAAC,SACC,8DAAC,UAAO,MAAK,UAAS,yBAAtB;AAAA;AAAA;AAAA;AAAA,eAA+B,KADjC;AAAA;AAAA;AAAA;AAAA,eAEA;AAAA,QACA,oDAAC,gBAAD;AAAA;AAAA;AAAA;AAAA,eAAY;AAAA;AAAA;AAAA,IAXd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,IApBE,oDAAC,SACC,8DAAC,UAAO,MAAK,UAAS,SAAS,MAAM,YAAY,EAAI,GAAG,yBAAxD;AAAA;AAAA;AAAA;AAAA,SAEA,KAHF;AAAA;AAAA;AAAA;AAAA,SAIA;AAkBN;AAEA,SAAS,oBAAoB,EAAE,GAAG,GAAmB;AAEnD,MAAM,CAAC,WAAW,YAAY,QAAI,wBAAS,EAAK,GAC1C,CAAC,QAAQ,SAAS,QAAI,wBAAS;AAErC,iBAAe,eAAe;AAC5B,iBAAa,EAAK;AAClB,QAAI;AACF,YAAM,SAAS,EAAE,WAAW,EAAE,GAAG,EAAE,CAAC;AAAA,IACtC,SAAS,GAAP;AACA,gBAAU,CAAC;AAAA,IACb;AAAA,EACF;AAEA,SACE,oDAAC,SACE;AAAA,gBACC,oDAAC,SACC;AAAA,0DAAC,OAAE,6BAAH;AAAA;AAAA;AAAA;AAAA,aAAgB;AAAA,MAChB,oDAAC,OAAE,8HAAH;AAAA;AAAA;AAAA;AAAA,aAGA;AAAA,MACA,oDAAC,SACC;AAAA,4DAAC,UAAO,SAAQ,WAAU,SAAS,MAAM,aAAa,EAAK,GAAG,sBAA9D;AAAA;AAAA;AAAA;AAAA,eAEA;AAAA,QACA,oDAAC,UAAO,SAAQ,UAAS,SAAS,cAAc,sBAAhD;AAAA;AAAA;AAAA;AAAA,eAEA;AAAA,WANF;AAAA;AAAA;AAAA;AAAA,aAOA;AAAA,SAbF;AAAA;AAAA;AAAA;AAAA,WAcA,IACE;AAAA,IACJ,oDAAC,UAAO,SAAS,MAAM,aAAa,EAAI,GAAG,sBAA3C;AAAA;AAAA;AAAA;AAAA,WAAiD;AAAA,IACjD,oDAAC,cAAW,UAAZ;AAAA;AAAA;AAAA;AAAA,WAA4B;AAAA,OAnB9B;AAAA;AAAA;AAAA;AAAA,SAoBA;AAEJ;AAEA,SAAS,iBAAiB;AA3Q1B;AA4QE,MAAM,WAAO,6BAA6B;AAC1C,SACE,oDAAC,QAAK,IAAG,YACP;AAAA,wDAAC,UAAO,sCAAR;AAAA;AAAA;AAAA;AAAA,WAA8B;AAAA,KAC7B,kCAAM,gBAAN,mBAAmB,gBAAgB,IAAI,UACtC,oDAAC,SACC;AAAA,0DAAC,YAAQ,eAAK,WAAd;AAAA;AAAA;AAAA;AAAA,aAAsB;AAAA,MACtB,oDAAC,SAAI;AAAA;AAAA,QAAO,IAAI,KAAK,KAAK,MAAM,KAAK,SAAS,CAAC,EAAE,eAAe;AAAA,WAAhE;AAAA;AAAA;AAAA;AAAA,aAAkE;AAAA,MAClE,oDAAC,uBAAiC,IAAI,KAAK,MAAlB,UAAzB;AAAA;AAAA;AAAA;AAAA,aAA+C;AAAA,SAHvC,KAAK,IAAf;AAAA;AAAA;AAAA;AAAA,WAIA;AAAA,IAEF,oDAAC,eAAY,YAAW,aAAY,OAAO,aAAW,QAAQ,qBAA9D;AAAA;AAAA;AAAA;AAAA,WAAiF;AAAA,OATnF;AAAA;AAAA;AAAA;AAAA,SAUA;AAEJ;AAEA,SAAS,gBAAgB;AAGvB,MAAM,CAAC,QAAQ,SAAS,QAAI,wBAAwB,IAAI,GAClD,CAAC,UAAU,WAAW,QAAI,wBAAS,EAAK,GACxC,CAAC,SAAS,UAAU,QAAI,wBAAS,EAAK,GACtC,CAAC,UAAU,WAAW,QAAI,wBAAS,EAAK,GACxC,CAAC,SAAS,UAAU,QAAI,wBAAS,EAAK,GACtC,eAAW,2BAAY,GACvB,CAAC,MAAM,QAAI,+BAAgB,GAC3B,SAAS,UAAU,GACnB,QAAQ,OAAO,IAAI,cAAc;AACvC,WAAS,OAAO;AACd,cAAU,IAAI,GACd,WAAW,EAAI,IACT,YAAY;AAChB,UAAI;AACF,YAAM,SAAS,MAAM,uBAAuB;AAC5C,QAAK,UACH,UAAU,iBAAiB;AAE7B,YAAM,EAAE,MAAM,QAAAC,QAAO,IAAI;AACzB,SAAI,CAAC,QAAQ,CAAC,KAAK,0BAA0B,CAAC,KAAK,uBAAuB,aACxE,QAAQ,IAAIA,OAAM,GAClB,UAAU,4BAA4B,IAExC,YAAY,EAAI;AAAA,MAClB,SAAS,GAAP;AACA,kBAAU,aAAa,QAAQ,EAAE,UAAU,CAAC;AAAA,MAC9C;AACA,iBAAW,EAAK;AAAA,IAClB,GAAG;AAAA,EACL;AACA,WAAS,kBAAkB;AACzB,IAAI,YAAY,CAAC,UAGjB,UAAU,IAAI,GACd,YAAY,EAAI,IACV,YAAY;AAChB,UAAI;AAGF,mBAAW,EAAI,GACf,OAAO;AAAA,MACT,SAAS,GAAP;AACA,kBAAU,CAAC;AAAA,MACb;AACA,kBAAY,EAAK;AAAA,IACnB,GAAG;AAAA,EACL;AACA,SAAI,WACF,SAAS,GAAG,GACL,QAGP,oDAAC,QAAK,IAAG,YACP;AAAA,wDAAC,UAAO,WAAU,2BAA0B,2BAA5C;AAAA;AAAA;AAAA;AAAA,WAAuD;AAAA,IACtD,QACC,oDAAC,SACC;AAAA,0DAAC,OAAE;AAAA;AAAA,QACW,oDAAC,OAAE,mEAAH;AAAA;AAAA;AAAA;AAAA,eAAsD;AAAA,QAAI;AAAA,WADxE;AAAA;AAAA;AAAA;AAAA,aAIA;AAAA,MACA,oDAAC,OAAE,WAAU,cACX;AAAA,QAAC;AAAA;AAAA,UACC,SAAQ;AAAA,UACR,WAAU;AAAA,UACV,SAAS;AAAA,UACT,UAAU;AAAA,UACX;AAAA;AAAA,QALD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOA,KARF;AAAA;AAAA;AAAA;AAAA,aASA;AAAA,SAfF;AAAA;AAAA;AAAA;AAAA,WAgBA,IACE,WACF,oDAAC,SAAI,sLAAL;AAAA;AAAA;AAAA;AAAA,WAGA,IAEA,oDAAC,OAAE,WAAU,cACX,8DAAC,UAAO,SAAQ,UAAS,SAAS,MAAM,UAAU,SAAS,2CAA3D;AAAA;AAAA;AAAA;AAAA,WAEA,KAHF;AAAA;AAAA;AAAA;AAAA,WAIA;AAAA,IAEF,oDAAC,cAAW,UAAZ;AAAA;AAAA;AAAA;AAAA,WAA4B;AAAA,OAhC9B;AAAA;AAAA;AAAA;AAAA,SAiCA;AAEJ;AAEA,eAAsB,OAAO,EAAE,SAAS,SAAS,EAAE,QAAQ,EAAE,GAAe;AAC1E,MAAM,EAAE,MAAM,GAAG,SAAS,IAAI,OAAO,YAAY,MAAM,QAAQ,SAAS,CAAC;AACzE,UAAQ,IAAI,sBAAsB,EAAE,MAAM,GAAG,SAAS,CAAC;AASvD,MAAI;AACF,YAAQ,MAAM;AAAA,MACZ,KAAK,iBAAiB;AACpB,gBAAQ,IAAI,kBAAkB;AAC9B,YAAM,EAAE,IAAI,GAAG,MAAM,IAAI,UACnB,SAAS,MAAM,QAAQ,oBAAoB,EAAE,IAAI,MAAM,CAAC;AAC9D,uBAAQ,IAAI,MAAM,GACX;AAAA,MACT;AAAA,MACA,KAAK,kBAAkB;AACrB,YAAM,SAAS,MAAM,QAAQ,wBAAwB,QAAQ;AAC7D,uBAAQ,IAAI,MAAM,GACX;AAAA,MACT;AAAA,IACF;AAAA,EACF,SAAS,GAAP;AAEA,QADA,QAAQ,IAAI,4BAA4B,CAAC,GACrC,aAAa;AACf,iBAAO,mBAAK,EAAE,OAAO,EAAE,QAAQ,CAAC;AAAA,EAEpC;AACA,aAAO,mBAAK,eAAe;AAC7B;;;AK1ZA;AAAA;AAAA,gBAAAC;AAAA,EAAA;AAAA,gBAAAC;AAAA;AAAA,IAAAC,gBAAyB,kBACzBC,eAAuD,4BACvDD,gBAAkE;;;ACFlE;AAAA;AAAA;AAAA;AAEA,mBAAgB,2BAOVE,0BAAA;AALC,SAAS,KAAK,MAA0B;AAJ/C;AAKE,MAAI,CAAC;AAAM,WAAO;AAClB,MAAM,YAAY,IAAI,KAAK,KAAK,SAAS;AACzC,SACE,oDAAC,QACC;AAAA,wDAAC,QAAG,WAAU,sBAAsB,eAAK,SAAzC;AAAA;AAAA;AAAA;AAAA,WAA+C;AAAA,IAC7C,KAAK,OACL,oDAAC,SAAI,WAAU,oCACZ,eAAK,KAAK,MAAM;AAAA;AAAA,CAAM,EAAE,IAAI,CAAC,GAAG,MAC/B,oDAAC,OAAW,eAAJ,GAAR;AAAA;AAAA;AAAA;AAAA,WAAc,CACf,KAHH;AAAA;AAAA;AAAA;AAAA,WAIA,IALY;AAAA,IAOd,oDAAC,QAAG,WAAU,sCACZ;AAAA,0DAAC,UAAK,WAAU,uCAAsC;AAAA;AAAA,SAAI,UAAK,SAAL,mBAAW;AAAA,WAArE;AAAA;AAAA;AAAA;AAAA,aAA8E;AAAA,MAC7E,KAAK,KAAK,IAAI,OACb,oDAAC,QAAW,WAAU,uCAAsC;AAAA;AAAA,QACxD;AAAA,WADK,GAAT;AAAA;AAAA;AAAA;AAAA,aAEA,CACD;AAAA,MACD,oDAAC,UAAK,WAAU,cAAc,2BAAAC,SAAI,SAAS,KAA3C;AAAA;AAAA;AAAA;AAAA,aAA6C;AAAA,SAP/C;AAAA;AAAA;AAAA;AAAA,WAQA;AAAA,OAjBF;AAAA;AAAA;AAAA;AAAA,SAkBA;AAEJ;;;ADJY,IAAAC,0BAAA;AAhBZ,eAAsBC,QAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAe;AACjE,MAAM,EAAE,KAAK,IAAI,MAAM,QAAQ,mBAAmB;AAClD,aAAO,mBAAK,IAAI;AAClB;AAEe,SAAR,QAAyB;AAbhC;AAcE,MAAM,CAAC,UAAU,WAAW,QAAI,wBAAS,EAAK,GACxC,WAAO,6BAA6B,GACpC,iBAAa,6BAA6B,GAC1C,iBAAa,6BAAc;AACjC,iBAAQ,IAAI,UAAU,GAEpB,oDAAC,UACE;AAAA,yBAAM,eAAe,WACpB,oDAAC,sBAAK,QAAO,QAAO,WAAU,qBAC5B,8DAAC,QAAK,IAAG,YACP;AAAA,0DAAC,UAAO,wBAAR;AAAA;AAAA;AAAA;AAAA,aAAgB;AAAA,MAChB,oDAAC,aACC;AAAA,4DAAC,SAAM,aAAY,SAAQ,MAAK,QAAO,MAAK,SAAQ,UAAQ,MAA5D;AAAA;AAAA;AAAA;AAAA,eAA6D;AAAA,QAC7D,oDAAC,SAAM,aAAY,QAAO,MAAK,YAAW,MAAK,QAAO,UAAQ,MAA9D;AAAA;AAAA;AAAA;AAAA,eAA+D;AAAA,QAC/D,oDAAC,SAAI,WAAU,kCACb;AAAA,8DAAC,UAAO,SAAQ,WAAU,MAAK,UAAS,oBAAxC;AAAA;AAAA;AAAA;AAAA,iBAEA;AAAA,UACA,oDAAC,UAAO,MAAK,SAAQ,sBAArB;AAAA;AAAA;AAAA;AAAA,iBAA2B;AAAA,aAJ7B;AAAA;AAAA;AAAA;AAAA,eAKA;AAAA,WARF;AAAA;AAAA;AAAA;AAAA,aASA;AAAA,MACA,oDAAC,gBAAD;AAAA;AAAA;AAAA;AAAA,aAAY;AAAA,SAZd;AAAA;AAAA;AAAA;AAAA,WAaA,KAdF;AAAA;AAAA;AAAA;AAAA,WAeA,IACE,qBAAM,cACR,oDAAC,SAAI,WAAU,eACb;AAAA,MAAC;AAAA;AAAA,QACC,SAAQ;AAAA,QACR,WAAU;AAAA,QACV,UAAU,WAAW,UAAU;AAAA,QAC/B,SAAS,MAAM,YAAY,EAAI;AAAA,QAChC;AAAA;AAAA,MALD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOA,KARF;AAAA;AAAA;AAAA;AAAA,WASA,IACE;AAAA,IACJ,oDAAC,SAAI,WAAU,0CACZ,6CAAM,UAAN,mBAAa,MAAM,IAAI,UACtB,oDAAC,QAAoB,GAAG,QAAb,KAAK,IAAhB;AAAA;AAAA;AAAA;AAAA,WAA8B,MAFlC;AAAA;AAAA;AAAA;AAAA,WAIA;AAAA,OAlCF;AAAA;AAAA;AAAA;AAAA,SAmCA;AAEJ;AAEA,eAAsBC,QAAO,EAAE,SAAS,SAAS,EAAE,QAAQ,EAAE,GAAe;AAC1E,MAAM,YAAY,OAAO,YAAY,MAAM,QAAQ,SAAS,CAAC;AAC7D,YAAU,OAAO,CAAC,MAAM;AACxB,MAAI;AACF,QAAM,EAAE,MAAM,OAAO,IAAI,MAAM,QAAQ,oBAAoB,SAAS;AACpE,QAAI;AAAQ,YAAM,OAAO,CAAC;AAC1B,eAAO,mBAAK,IAAI;AAAA,EAClB,SAAS,KAAP;AACA,kBAAQ,MAAM,GAAG,GACX;AAAA,EACR;AACF;;;AEtEA;AAAA;AAAA,gBAAAC;AAAA,EAAA;AAAA,gBAAAC;AAAA;AAGA,IAAAC,iBAAmD,6BAc3CC,0BAAA;AAZR,eAAsBC,QAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAe;AACjE,MAAM,EAAE,KAAK,IAAI,MAAM,QAAQ,oBAAoB;AACnD,SAAO;AACT;AAEe,SAAR,iBAAkC;AACvC,MAAM,iBAAa,8BAAc,GAC3B,iBAAa,8BAAc;AACjC,SAAI,cAAY,QAAQ,IAAI,UAAU,GAEpC,oDAAC,UAAO,YAAY,UAAQ,KAAK,WAC9B,qBAAW,UAAU,SACpB,oDAAC,QAAK,0PAAN;AAAA;AAAA;AAAA;AAAA,SAIA,IAEA,oDAAC,uBAAK,QAAO,QAAO,WAAU,4BAC5B,8DAAC,QAAK,IAAG,YACP;AAAA,wDAAC,UAAO,+BAAR;AAAA;AAAA;AAAA;AAAA,WAAuB;AAAA,IACvB,oDAAC,aACC;AAAA,0DAAC,WAAQ,OAAM,UACb,8DAAC,SAAM,MAAK,SAAQ,MAAK,SAAQ,UAAQ,MAAzC;AAAA;AAAA;AAAA;AAAA,aAA0C,KAD5C;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,MACA,oDAAC,SACC,8DAAC,UAAO,MAAK,UAAS,8BAAtB;AAAA;AAAA;AAAA;AAAA,aAAoC,KADtC;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,MACA,oDAAC,gBAAD;AAAA;AAAA;AAAA;AAAA,aAAY;AAAA,SAPd;AAAA;AAAA;AAAA;AAAA,WAQA;AAAA,OAVF;AAAA;AAAA;AAAA;AAAA,SAWA,KAZF;AAAA;AAAA;AAAA;AAAA,SAaA,KArBJ;AAAA;AAAA;AAAA;AAAA,SAuBA;AAEJ;AACA,eAAsBC,QAAO,EAAE,SAAS,SAAS,EAAE,QAAQ,EAAE,GAAe;AAC1E,MAAM,SAAS,OAAO,YAAY,MAAM,QAAQ,SAAS,CAAC;AAC1D,UAAQ,IAAI,8BAA8B,MAAM;AAChD,MAAM,EAAE,KAAK,IAAI,MAAM,QAAQ,wBAAwB,MAAM;AAC7D,iBAAQ,IAAI,IAAI,GACT;AACT;;;AC/CA;AAAA;AAAA,gBAAAC;AAAA,EAAA;AAAA,gBAAAC;AAAA;AACA,IAAAC,iBAAyD;AAazD,IAAAC,eAAuD,4BAc7CC,0BAAA;AAZV,eAAsBC,QAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAe;AACjE,MAAM,EAAE,KAAK,IAAI,MAAM,QAAQ,oBAAoB;AACnD,aAAO,mBAAK,IAAI;AAClB;AAEe,SAAR,QAAyB;AAC9B,MAAM,CAAC,MAAM,QAAI,gCAAgB,GAC3B,aAAa,OAAO,IAAI,YAAY,KAAK;AAC/C,SACE,oDAAC,UAAO,YAAY,UAAQ,KAAK,WAC/B,8DAAC,uBAAK,QAAO,QAAO,WAAU,qBAC5B,8DAAC,QAAK,IAAG,YACP;AAAA,wDAAC,UAAO,sBAAR;AAAA;AAAA;AAAA;AAAA,WAAc;AAAA,IACd,oDAAC,SAAI,WAAU,oCACb,8DAAC,eAAY,OAAM,UAAS,cAA5B;AAAA;AAAA;AAAA;AAAA,WAAoD,KADtD;AAAA;AAAA;AAAA;AAAA,WAEA;AAAA,IACA,oDAAC,aAAU,WAAU,QACnB;AAAA,0DAAC,WAAQ,OAAO,oDAAC,UAAK,yBAAN;AAAA;AAAA;AAAA;AAAA,aAAe,GAC7B,8DAAC,SAAM,MAAK,QAAO,MAAK,YAAW,aAAY,YAAW,UAAQ,MAAlE;AAAA;AAAA;AAAA;AAAA,aAAmE,KADrE;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,MACA,oDAAC,WAAQ,OAAO,oDAAC,UAAK,yBAAN;AAAA;AAAA;AAAA;AAAA,aAAe,GAC7B,8DAAC,SAAM,MAAK,YAAW,MAAK,YAAW,aAAY,YAAW,UAAQ,MAAtE;AAAA;AAAA;AAAA;AAAA,aAAuE,KADzE;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,MACA,oDAAC,SAAI,WAAU,uBACb;AAAA,4DAAC,UAAO,SAAQ,WAAU,MAAK,UAAS,sBAAxC;AAAA;AAAA;AAAA;AAAA,eAEA;AAAA,QACA,oDAAC,gBAAD;AAAA;AAAA;AAAA;AAAA,eAAY;AAAA,QACZ,oDAAC,uBAAK,IAAG,WAAU,qCAAnB;AAAA;AAAA;AAAA;AAAA,eAAwC;AAAA,WAL1C;AAAA;AAAA;AAAA;AAAA,aAMA;AAAA,SAbF;AAAA;AAAA;AAAA;AAAA,WAcA;AAAA,OAnBF;AAAA;AAAA;AAAA;AAAA,SAoBA,KArBF;AAAA;AAAA;AAAA;AAAA,SAsBA,KAvBF;AAAA;AAAA;AAAA;AAAA,SAwBA;AAEJ;AACA,eAAsBC,QAAO,EAAE,SAAS,SAAS,EAAE,QAAQ,EAAE,GAAe;AApD5E;AAqDE,MAAM,YAAY,OAAO,YAAY,MAAM,QAAQ,SAAS,CAAC,GACvD,eAAe,IAAI,IAAI,QAAQ,GAAG,EAAE,cACpC,SAAS,OAAO,YAAY,YAAY;AAC9C,MAAI,EAAE,cAAc;AAAY,UAAM,IAAI,MAAM,kBAAkB;AAClE,MAAI,EAAE,cAAc;AAAY,UAAM,IAAI,MAAM,kBAAkB;AAClE,UAAQ,IAAI,EAAE,QAAQ,aAAa,CAAC;AACpC,MAAM,EAAE,MAAM,OAAO,IAAI,MAAM,QAAQ,eAAe,SAAS;AAC/D,MAAI;AAAQ,UAAM;AAClB,MAAI,GAAC,kCAAM,UAAN,WAAa,KAAK;AAAI,UAAM,IAAI,MAAM,iBAAiB;AAC5D,aAAO,uBAAS,OAAO,cAAc,GAAG;AAC1C;;;AC/DA;AAAA;AAAA,gBAAAC;AAAA,EAAA;AAAA,gBAAAC;AAAA;AAYA,IAAAC,iBAAoC;;;ACZpC,IAAAC,eAAiD,4BAQ3C,MACJ,OACA,CAAI,OAAa,EAAE,CAAC,GAAG,IACnB,MAAM,IAAI,QAAQ,GAAG,GAEd,UACX,IAAI,QACJ,CAAC,KAAiB,SAA8B;AAC9C,MAAI,QAAQ,IACN,SAAS,CAAC;AAChB,WAAS,SAAS,GAAiB;AACjC,QAAI,KAAK;AAAO,aAAO,QAAQ,OAAO,4CAA4C;AAClF,YAAQ;AACR,QAAM,KAAK,MAAM,IAAI,SAAS,OAAO,IAAI,CAAC;AAC1C,QAAI,CAAC;AAAI,aAAO,QAAQ,QAAQ;AAChC,QAAI;AACF,aAAO,QAAQ,QAAQ,GAAG,OAAO,OAAO,KAAK,EAAE,OAAO,CAAC,GAAG,SAAS,KAAK,MAAM,IAAI,CAAC,CAAC,CAAC;AAAA,IACvF,SAAS,KAAP;AACA,aAAO,QAAQ,OAAO,GAAG;AAAA,IAC3B;AAAA,EACF;AACA,SAAO,SAAS,CAAC;AACnB,GAEW,cACX,CAAC,UAAU,cACX,OAAM,QAAO;AACX,UAAQ,IAAI,aAAa,SAAS,IAAI,OAAO,IAAI;AACjD,MAAM,WAAW,MAAM,IAAI,QAAQ,QAAQ,UAAU,SAAS;AAE9D,MADA,QAAQ,IAAI,QAAQ,GAChB,SAAS;AACX,UAAI,SAAS,OAAO,CAAC,IAAS,MAAM,SAAS,MAAM,IAC7C,SAAS,OAAO,CAAC;AAEzB,aAAI,OAAO,cAAc,SAAS,KAAK,aAChC,SAAS;AAClB,GAEGC,gBAAL,kBAAKA,mBACHA,4BAAA,QAAQ,KAAR,SACAA,4BAAA,aAAa,KAAb,cACAA,4BAAA,YAAY,KAAZ,aACAA,4BAAA,UAAU,KAAV,WACAA,4BAAA,YAAY,KAAZ,aALGA,iCAAA,KAQQ,aACX,CAAC,SACD,OAAO,KAAK,SAAS;AACnB,MAAMC,cAAa,KAAKD,aAAY,GAC9B,mBAAmBC,cAAa,oBAChC,kBAAkBA,cAAa,mBAC/B,gBAAgBA,cAAa,iBAC7B,kBAAkBA,cAAa;AAErC,MADA,MAAM,KAAK,GACP,EAAE,IAAI,UAAU,iBAAiB,IAAI;AACvC,UAAM,IAAI,MAAM,iDAAiD;AAEnE,MAAM,cAAc,IAAI,OAAO,aACzB,kBAAkB,IAAI,IAAI,IAAI,QAAQ,GAAG,EAAE;AACjD,MAAI,gBAAgB,mBAAoB,mBAAmB,YAAY,SAAS;AAC9E,UAAK,mBAAiB,QAAQ,KAAK,kCAAkC,YAAY,QAAQ,OACnF,uBAAS,GAAG;AACb,MAAI,eAAe,QAAQ;AAChC,cAAM,uBAAS,gBAAgB,mBAAmB,eAAe,GAAG;AAExE;;;AD3DF,IAAAC,eAA2C,4BAajCC,2BAAA,kCAXGC,UAAS;AAAA,EACpB,YAAY,sBAAsB,CAAC,CAAC;AAAA,EACpC,WAAW,UAAQ,KAAK,SAAS;AACnC;AAEe,SAAR,SAA0B;AAC/B,MAAM,WAAO,8BAA6B;AAC1C,SACE,qDAAC,UAAO,MAAM,6BAAM,aAClB,+DAAC,uBAAK,QAAO,QAAO,WAAU,qBAC5B,+DAAC,QAAK,IAAG,YACP;AAAA,yDAAC,UAAO,uBAAR;AAAA;AAAA;AAAA;AAAA,WAAe;AAAA,IACf,qDAAC,SAAI,WAAU,oCACb,+DAAC,eAAY,OAAM,aAAnB;AAAA;AAAA;AAAA;AAAA,WAA6B,KAD/B;AAAA;AAAA;AAAA;AAAA,WAEA;AAAA,IACA,qDAAC,aAAU,WAAU,QACnB;AAAA;AAAA,QAAC;AAAA;AAAA,UACC,OACE,0FAAE;AAAA;AAAA,YACK,qDAAC,UAAO,IAAG,SAAQ,iBAAnB;AAAA;AAAA;AAAA;AAAA,mBAAoB;AAAA,YAAS;AAAA,eADpC;AAAA;AAAA;AAAA;AAAA,iBAEA;AAAA,UAGF,+DAAC,SAAM,MAAK,SAAQ,MAAK,SAAQ,gBAAe,SAAQ,UAAQ,MAAhE;AAAA;AAAA;AAAA;AAAA,iBAAiE;AAAA;AAAA,QAPnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQA;AAAA,MACA;AAAA,QAAC;AAAA;AAAA,UACC,OACE,0FAAE;AAAA;AAAA,YACQ,qDAAC,UAAO,IAAG,SAAQ,iBAAnB;AAAA;AAAA;AAAA;AAAA,mBAAoB;AAAA,YAAS;AAAA,eADvC;AAAA;AAAA;AAAA;AAAA,iBAEA;AAAA,UAGF;AAAA,YAAC;AAAA;AAAA,cACC,MAAK;AAAA,cACL,MAAK;AAAA,cACL,gBAAe;AAAA,cACf,cAAa;AAAA,cACb,UAAQ;AAAA;AAAA,YALV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAMA;AAAA;AAAA,QAbF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAcA;AAAA,MACA;AAAA,QAAC;AAAA;AAAA,UACC,OACE,0FAAE;AAAA;AAAA,YACQ,qDAAC,UAAO,IAAG,SAAQ,iBAAnB;AAAA;AAAA;AAAA;AAAA,mBAAoB;AAAA,YAAS;AAAA,eADvC;AAAA;AAAA;AAAA;AAAA,iBAEA;AAAA,UAGF,+DAAC,SAAM,MAAK,YAAW,MAAK,YAAW,UAAQ,IAAC,WAAW,KAA3D;AAAA;AAAA;AAAA;AAAA,iBAA8D;AAAA;AAAA,QAPhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQA;AAAA,MACA;AAAA,QAAC;AAAA;AAAA,UACC,OACE,0FAAE;AAAA;AAAA,YACgB,qDAAC,UAAO,IAAG,SAAQ,iBAAnB;AAAA;AAAA;AAAA;AAAA,mBAAoB;AAAA,YAAS;AAAA,eAD/C;AAAA;AAAA;AAAA;AAAA,iBAEA;AAAA,UAGF,+DAAC,SAAM,MAAK,YAAW,MAAK,mBAAkB,UAAQ,IAAC,WAAW,KAAlE;AAAA;AAAA;AAAA;AAAA,iBAAqE;AAAA;AAAA,QAPvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQA;AAAA,MACA,qDAAC,WAAQ,OAAO,qDAAC,UAAK,0BAAN;AAAA;AAAA;AAAA;AAAA,aAAgB,GAC9B,+DAAC,SAAM,MAAK,QAAO,MAAK,UAAxB;AAAA;AAAA;AAAA;AAAA,aAA+B,KADjC;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,MACA,qDAAC,SACC;AAAA,6DAAC,UAAO,MAAK,UAAS,wBAAtB;AAAA;AAAA;AAAA;AAAA,eAA8B;AAAA,QAC9B,qDAAC,gBAAD;AAAA;AAAA;AAAA;AAAA,eAAY;AAAA,WAFd;AAAA;AAAA;AAAA;AAAA,aAGA;AAAA,SAjDF;AAAA;AAAA;AAAA;AAAA,WAkDA;AAAA,OAvDF;AAAA;AAAA;AAAA;AAAA,SAwDA,KAzDF;AAAA;AAAA;AAAA;AAAA,SA0DA,KA3DF;AAAA;AAAA;AAAA;AAAA,SA4DA;AAEJ;AAEO,IAAMC,UAAS,OAAO,EAAE,SAAS,SAAS,EAAE,QAAQ,EAAE,MAAkB;AAzF/E;AA0FE,MAAM,WAAW,OAAO,YAAY,MAAM,QAAQ,SAAS,CAAC,GACtD,SAAS,OAAO,YAAY,IAAI,IAAI,QAAQ,GAAG,EAAE,YAAY,GAC7D,WAAW,MAAM,QAAQ,kBAAkB,QAAQ;AAEzD,MADA,QAAQ,IAAI,QAAQ,GAChB,GAAC,oBAAS,SAAT,mBAAe,aAAf,WAAyB,KAAK;AAAI,eAAO,mBAAK,QAAQ;AAC3D,YAAM,uBAAS,OAAO,cAAc,GAAG;AACzC;;;AEhGA;AAAA;AAAA;AAAA,gBAAAC;AAAA;AAEA,IAAAC,eAAiC,4BACjCC,iBAA8B,6BAoBtBC,2BAAA;AAlBR,eAAsBC,QAAO,EAAE,SAAS,SAAS,EAAE,QAAQ,EAAE,GAAe;AAL5E;AAME,MAAM,eAAe,OAAO,YAAY,IAAI,IAAI,QAAQ,GAAG,EAAE,YAAY,GACnE,SAAS,MAAM,QAAQ,qBAAqB,YAAY;AAC9D,iBAAQ,IAAI,MAAM,OACX,mBAAK;AAAA,IACV,IAAG,kBAAO,SAAP,mBAAa,gBAAb,mBAA0B;AAAA,IAC7B,UAAS,kBAAO,SAAP,mBAAa,gBAAb,WAA0B,UAC/B,+EACA;AAAA,EACN,CAAC;AACH;AAEe,SAAR,SAA0B;AAC/B,MAAM,EAAE,QAAQ,QAAI,8BAA6B;AAEjD,SACE,qDAAC,UACC,+DAAC,QAAK,WAAU,OACd,+DAAC,aAAU,WAAU,oBAAoB,qBAAzC;AAAA;AAAA;AAAA;AAAA,SAAiD,KADnD;AAAA;AAAA;AAAA;AAAA,SAEA,KAHF;AAAA;AAAA;AAAA;AAAA,SAIA;AAEJ;;;AC3BA;AAAA;AAAA,gBAAAC;AAAA,EAAA;AAAA,gBAAAC;AAAA;AAAA,IAAAC,iBAAgC,kBAChCC,eAA6C,4BAC7CD,iBAAqD;AAsBzC,IAAAE,2BAAA;AAlBZ,eAAsBC,QAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAe;AACjE,MAAM,EAAE,KAAK,IAAI,MAAM,QAAQ,oBAAoB;AACnD,SAAO;AACT;AAEe,SAAR,YAA6B;AAClC,MAAM,CAAC,MAAM,QAAI,gCAAgB,GAC3B,iBAAa,8BAA6B,GAC1C,CAAC,QAAQ,SAAS,QAAI,yBAAwB,IAAI,GAElD,SAAS,OAAO,IAAI,QAAQ,GAC5B,QAAQ,OAAO,IAAI,OAAO;AAEhC,SACE,qDAAC,UAAO,YAAY,UAAQ,KAAK,OAC/B,+DAAC,SAAI,WAAU,qBACZ;AAAA,kBAAc,aAAa,aAC1B,qDAAC,QAAK,WAAU,mBACd,+DAAC,cAAW,QAAQ,WAAW,WAA/B;AAAA;AAAA;AAAA;AAAA,WAAwC,KAD1C;AAAA;AAAA;AAAA;AAAA,WAEA,IACE;AAAA,IACJ;AAAA,MAAC;AAAA;AAAA,QACC,QAAO;AAAA,QACP,UAAU,QAAM;AACd,cAAM,SAAS,OAAO,YAAY,IAAI,SAAS,GAAG,aAAa,CAAC;AAChE,cAAI,OAAO,aAAa,OAAO;AAC7B,6BAAU,sBAAsB,GACzB,GAAG,eAAe;AAE3B,oBAAU,IAAI;AAAA,QAChB;AAAA,QAEA;AAAA,+DAAC,QAAK,IAAG,YACP;AAAA,iEAAC,UAAO,+BAAR;AAAA;AAAA;AAAA;AAAA,mBAAuB;AAAA,YACvB,qDAAC,aACC;AAAA,mEAAC,WAAQ,OAAM,4BACb,+DAAC,SAAM,MAAK,YAAW,MAAK,YAAW,UAAQ,IAAC,cAAa,kBAA7D;AAAA;AAAA;AAAA;AAAA,qBAA4E,KAD9E;AAAA;AAAA;AAAA;AAAA,qBAEA;AAAA,cACA,qDAAC,WAAQ,OAAM,sBACb;AAAA,gBAAC;AAAA;AAAA,kBACC,MAAK;AAAA,kBACL,MAAK;AAAA,kBACL,UAAQ;AAAA,kBACR,cAAa;AAAA;AAAA,gBAJf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAKA,KANF;AAAA;AAAA;AAAA;AAAA,qBAOA;AAAA,cACA,qDAAC,cAAW,UAAZ;AAAA;AAAA;AAAA;AAAA,qBAA4B;AAAA,cAC5B,qDAAC,UAAO,SAAQ,WAAU,gCAA1B;AAAA;AAAA;AAAA;AAAA,qBAA0C;AAAA,iBAb5C;AAAA;AAAA;AAAA;AAAA,mBAcA;AAAA,eAhBF;AAAA;AAAA;AAAA;AAAA,iBAiBA;AAAA,UACA,qDAAC,SAAM,MAAK,SAAQ,MAAK,UAAS,OAAO,SAAzC;AAAA;AAAA;AAAA;AAAA,iBAAgD;AAAA,UAChD,qDAAC,SAAM,MAAK,UAAS,MAAK,UAAS,OAAO,UAA1C;AAAA;AAAA;AAAA;AAAA,iBAAkD;AAAA;AAAA;AAAA,MA9BpD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA+BA;AAAA,OArCF;AAAA;AAAA;AAAA;AAAA,SAsCA,KAvCF;AAAA;AAAA;AAAA;AAAA,SAwCA;AAEJ;AAOA,eAAsBC,QAAO,EAAE,SAAS,SAAS,EAAE,QAAQ,EAAE,GAAe;AArE5E;AAsEE,MAAM,SAAS,OAAO,YAAY,MAAM,QAAQ,SAAS,CAAC,GACpD,SAAS,MAAM,QAAQ,uBAAuB,MAAM;AAC1D,SAAI,OAAO,UACT,QAAQ,IAAI,OAAO,MAAM,OAClB,mBAAK,EAAE,SAAS,oBAAoB,CAAC,MAGzC,kBAAO,SAAP,mBAAa,kBAAb,WAA4B,cAG1B,mBAAK,EAAE,SAAS,qDAAqD,CAAC,QAFpE,mBAAK,EAAE,SAAS,8CAA8C,CAAC;AAG1E;;;ACjFA,IAAO,0BAAQ,EAAC,OAAQ,EAAC,QAAS,mCAAkC,SAAU,CAAC,oCAAmC,oCAAmC,oCAAmC,oCAAmC,oCAAmC,oCAAmC,oCAAmC,kCAAkC,EAAC,GAAE,QAAS,EAAC,MAAO,EAAC,IAAK,QAAO,UAAW,QAAU,MAAO,IAAG,OAAQ,QAAU,eAAgB,QAAU,QAAS,2BAA0B,SAAU,QAAU,WAAY,IAAM,WAAY,IAAM,kBAAmB,IAAM,kBAAmB,GAAI,GAAE,iBAAgB,EAAC,IAAK,iBAAgB,UAAW,QAAO,MAAO,QAAU,OAAQ,IAAK,eAAgB,QAAU,QAAS,oCAAmC,SAAU,CAAC,oCAAmC,kCAAkC,GAAE,WAAY,IAAK,WAAY,IAAK,kBAAmB,IAAM,kBAAmB,GAAK,GAAE,iBAAgB,EAAC,IAAK,iBAAgB,UAAW,QAAO,MAAO,UAAS,OAAQ,QAAU,eAAgB,QAAU,QAAS,oCAAmC,SAAU,CAAC,kCAAkC,GAAE,WAAY,IAAK,WAAY,IAAK,kBAAmB,IAAM,kBAAmB,GAAK,GAAE,eAAc,EAAC,IAAK,eAAc,UAAW,QAAO,MAAO,QAAO,OAAQ,QAAU,eAAgB,QAAU,QAAS,kCAAiC,SAAU,QAAU,WAAY,IAAM,WAAY,IAAM,kBAAmB,IAAM,kBAAmB,GAAK,GAAE,gBAAe,EAAC,IAAK,gBAAe,UAAW,QAAO,MAAO,SAAQ,OAAQ,QAAU,eAAgB,QAAU,QAAS,mCAAkC,SAAU,CAAC,oCAAmC,kCAAkC,GAAE,WAAY,IAAK,WAAY,IAAK,kBAAmB,IAAM,kBAAmB,GAAK,GAAE,mBAAkB,EAAC,IAAK,mBAAkB,UAAW,QAAO,MAAO,YAAW,OAAQ,QAAU,eAAgB,QAAU,QAAS,sCAAqC,SAAU,CAAC,oCAAmC,kCAAkC,GAAE,WAAY,IAAK,WAAY,IAAK,kBAAmB,IAAM,kBAAmB,GAAK,GAAE,iBAAgB,EAAC,IAAK,iBAAgB,UAAW,QAAO,MAAO,UAAS,OAAQ,QAAU,eAAgB,QAAU,QAAS,oCAAmC,SAAU,CAAC,oCAAmC,kCAAkC,GAAE,WAAY,IAAK,WAAY,IAAK,kBAAmB,IAAM,kBAAmB,GAAK,GAAE,iBAAgB,EAAC,IAAK,iBAAgB,UAAW,QAAO,MAAO,UAAS,OAAQ,QAAU,eAAgB,QAAU,QAAS,oCAAmC,SAAU,CAAC,oCAAmC,kCAAkC,GAAE,WAAY,IAAK,WAAY,IAAK,kBAAmB,IAAM,kBAAmB,GAAK,GAAE,iBAAgB,EAAC,IAAK,iBAAgB,UAAW,QAAO,MAAO,UAAS,OAAQ,QAAU,eAAgB,QAAU,QAAS,oCAAmC,SAAU,CAAC,oCAAmC,kCAAkC,GAAE,WAAY,IAAM,WAAY,IAAK,kBAAmB,IAAM,kBAAmB,GAAK,EAAC,GAAE,SAAU,YAAW,KAAM,EAAC,SAAU,oCAAmC,WAAY,cAAa,GAAE,KAAM,8BAA6B;;;ACYhrG,IAAM,uBAAuB,gBACvB,SAAS,EAAC,QAAS,IAAK,kBAAmB,IAAM,mBAAoB,IAAM,kBAAmB,IAAK,YAAa,IAAK,SAAU,IAAK,wBAAyB,IAAK,oBAAqB,GAAI,GAC3L,aAAa,WACb,QAAQ,EAAE,QAAQ,qBAAY,GAC9B,SAAS;AAAA,EACpB,MAAQ;AAAA,IACN,IAAI;AAAA,IACJ,UAAU;AAAA,IACV,MAAM;AAAA,IACN,OAAO;AAAA,IACP,eAAe;AAAA,IACf,QAAQ;AAAA,EACV;AAAA,EACF,mBAAmB;AAAA,IACf,IAAI;AAAA,IACJ,UAAU;AAAA,IACV,MAAM;AAAA,IACN,OAAO;AAAA,IACP,eAAe;AAAA,IACf,QAAQ;AAAA,EACV;AAAA,EACF,iBAAiB;AAAA,IACb,IAAI;AAAA,IACJ,UAAU;AAAA,IACV,MAAM;AAAA,IACN,OAAO;AAAA,IACP,eAAe;AAAA,IACf,QAAQ;AAAA,EACV;AAAA,EACF,iBAAiB;AAAA,IACb,IAAI;AAAA,IACJ,UAAU;AAAA,IACV,MAAM;AAAA,IACN,OAAO;AAAA,IACP,eAAe;AAAA,IACf,QAAQ;AAAA,EACV;AAAA,EACF,iBAAiB;AAAA,IACb,IAAI;AAAA,IACJ,UAAU;AAAA,IACV,MAAM;AAAA,IACN,OAAO;AAAA,IACP,eAAe;AAAA,IACf,QAAQ;AAAA,EACV;AAAA,EACF,iBAAiB;AAAA,IACb,IAAI;AAAA,IACJ,UAAU;AAAA,IACV,MAAM;AAAA,IACN,OAAO;AAAA,IACP,eAAe;AAAA,IACf,QAAQ;AAAA,EACV;AAAA,EACF,iBAAiB;AAAA,IACb,IAAI;AAAA,IACJ,UAAU;AAAA,IACV,MAAM;AAAA,IACN,OAAO;AAAA,IACP,eAAe;AAAA,IACf,QAAQ;AAAA,EACV;AAAA,EACF,gBAAgB;AAAA,IACZ,IAAI;AAAA,IACJ,UAAU;AAAA,IACV,MAAM;AAAA,IACN,OAAO;AAAA,IACP,eAAe;AAAA,IACf,QAAQ;AAAA,EACV;AAAA,EACF,eAAe;AAAA,IACX,IAAI;AAAA,IACJ,UAAU;AAAA,IACV,MAAM;AAAA,IACN,OAAO;AAAA,IACP,eAAe;AAAA,IACf,QAAQ;AAAA,EACV;AACF;",
  "names": ["isbot", "import_react", "import_jsx_dev_runtime", "import_react", "gql", "import_react", "import_react", "import_react", "import_jsx_dev_runtime", "AuthRestrict", "forbidWhen", "ErrorBoundary", "DefaultErrorBoundary", "import_jsx_dev_runtime", "React", "import_node", "import_react", "import_jsx_dev_runtime", "_a", "errors", "action", "loader", "import_react", "import_node", "import_jsx_dev_runtime", "ago", "import_jsx_dev_runtime", "loader", "action", "action", "loader", "import_react", "import_jsx_dev_runtime", "loader", "action", "action", "loader", "import_react", "import_node", "import_jsx_dev_runtime", "loader", "action", "action", "loader", "import_react", "import_node", "AuthRestrict", "forbidWhen", "import_node", "import_jsx_dev_runtime", "loader", "action", "loader", "import_node", "import_react", "import_jsx_dev_runtime", "loader", "action", "loader", "import_react", "import_node", "import_jsx_dev_runtime", "loader", "action"]
}
